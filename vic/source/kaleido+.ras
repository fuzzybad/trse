/**
 * This was created using the Turbo Rascal Syntax Error development platform.
 * 
 * https://turborascal.com
 * https://github.com/leuat/TRSE
 *
 * License: GPL V3
 *
 * Enhanced version of KALEIDOSCOPE from:
 *  "32 BASIC Programs for the PET Computer" Tom Rugg and Phil Feldman (1979)
 * 
 * Author: Jessica Petersen <fuzzybad@gmail.com> (Nov 2021)]
 *
 * This is a much extended version of the KALEIDO routine. The pattern will reverse,
 * randomly select different characters and move about the screen over time.
 * It also supports full-screen mode (original was 24x24 only) and supports 80-col PETs.
 * 
 */
program Kaleido;
var  
	// Main program vars
	myscreenwidth	: byte = 22;	 // Default 22, Optimized 24
	myscreenheight	: byte = 23;	 // Default 23, Optimized 21
	centerX 	  		: byte = 12;
	centerY 	  		: byte = 10;
	start_pos 	  	: byte = 1;
	stop_pos 	  	: byte = 12;
	dir			  	: byte = 1;
	char_start 	  	: byte;
	char_offset		: byte;
	char_start_st 	: byte = 64;	// Graphics chars
	char_offset_st  	: byte = 63;
	num_chars	  	: byte = 6;	// Number of chars in the array
	speed 		  	: byte = 3;	// Recommended values 0-9
	rev_enable	  	: byte = 0;	// 0=Disable, 1=Enable reverse chars
	pattern_type  	: byte = 1;	// 0=4-Point Pattern, 1=8-Point Pattern
	curr_color		: byte = 1;	// Current color
	char_arr 	  	: array[20] of byte;
	p 			  	: pointer;
	plotIndex, plotIndexMax, mainIndex, colSelect, i, temp, rando: byte;
	x1, y1, x2, y2	: signed byte;
	// Color arrays
	cArr1			: array[] of byte = (1, 7, 2, 7, 1); // wht, yel, red 
	cArr2			: array[] of byte = (4, 5, 6, 5, 4); // pur, grn, blu 
	cArr3			: array[] of byte = (1, 3, 5, 3, 1); // wht, cyn, grn 
	cArr4			: array[] of byte = (3, 7, 1, 7, 3); // cyn, yel, wht
	cArr5			: array[] of byte = (1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1 ); // All
	colorIdx			: byte = 0;
	cArrPtr			: pointer;
	cArrLen			: byte = 0;
	cycleCtr			: byte = 0;
	
	// VIC Colors
	// 0 = black, 1 = white, 2 = red, 3 = cyan, 4 = purple, 5 = green, 6 = blue, 7 = yellow

	// Used for keyboard input
	key: byte;
	
	// Text for splash screen  	
	titlemsg:	string = ("KALEIDOSCOPE+");
	authormsg1: 	string = ("JESSICA PETERSEN");
	authormsg2:	string = ("<FUZZYBAD> 2021");
	authormsg3: 	string = ("BASED ON ROUTINE BY");
	authormsg4: 	string = ("RUGG & FELDMAN, 1979");
	inst1: 		string = ("0-9 - ADJUST SPEED");
	inst2: 		string = ("Q   - QUIT");
	// PRESS ANY KEY
	promptmsg: string = (208, 210, 197, 211, 211, 32, 193, 206, 217, 32, 203, 197, 217);

// Include common functions
@include "functions.ras"


//	Method which shows title screen and checks screen width
procedure ShowTitle();
begin
	// Set palette
	cArrPtr := #cArr1;
	cArrLen := length(cArr1);
	
	// Set uppercase
	poke(^59468, 0, 12);	 // 59468 or $E84C
		
	// Set black background/border
	poke(SCREEN_BG_COLOR, 0, 8);
	
	// Clear screen
	clearscreen($20, SCREEN_CHAR_LOC);

	// Set default colormemory
	clearscreen(3, SCREEN_COL_LOC);
	
	// Center the title text
	x1 := myscreenwidth / 2 - length(titlemsg) / 2;
	moveto(x1, 1, hi(SCREEN_CHAR_LOC));
   	printString(titlemsg, 0, length(titlemsg));

	// Center the author message
	x1 := myscreenwidth / 2 - length(authormsg1) / 2;
	moveto(x1, 3, hi(SCREEN_CHAR_LOC));
   	printString(authormsg1, 0, length(authormsg1));

	x1 := myscreenwidth / 2 - length(authormsg2) / 2;
	moveto(x1, 4, hi(SCREEN_CHAR_LOC));
   	printString(authormsg2, 0, length(authormsg2));

	x1 := myscreenwidth / 2 - length(authormsg3) / 2;
	moveto(x1, 7, hi(SCREEN_CHAR_LOC));
   	printString(authormsg3, 0, length(authormsg3));

	x1 := myscreenwidth / 2 - length(authormsg4) / 2;
	moveto(x1, 8, hi(SCREEN_CHAR_LOC));
   	printString(authormsg4, 0, length(authormsg4));

	// Display Controls
	x1 := 2;
	moveto(x1, 12, hi(SCREEN_CHAR_LOC));
    printString(inst1, 0, length(inst1));

	moveto(x1, 14, hi(SCREEN_CHAR_LOC));
    printString(inst2, 0, length(inst2));

	// Center prompt to continue
	// TRSE seems bugged at counting length of numeric strings
	x1 := myscreenwidth / 2 - 13 / 2;
	moveto(x1, 20, hi(SCREEN_CHAR_LOC));
   	printString(promptmsg, 0, 13);

	WaitForKeypress();
	
	// Setup VIC screen
	// @TODO: Need to check for PAL/NTSC and position screen accordingly
	/*
	asm("
		sei
		lda $9002
		and #128
		ora myscreenwidth
		sta $9002	// Set # of columns
		lda myscreenheight
		rol
		and #126
		sta $9003	// Set # of rows
		lda #10
		sta $9000	// Set horizontal screen position
		lda #40
		sta $9001	// Set vertical screen position
		cli
	");
	*/
	
	//for i := 0 to myscreenwidth do
	//begin
	//	PokeAddr(i, 0, i);		
	//end;
	//for i := 0 to myscreenheight do
	//begin
	//	PokeAddr(0, i, i);		
	//end;
	//WaitForKeypress();
end;


//////////////////////////
// Plot chars on screen
//////////////////////////
procedure Plot();
begin
	// Debug
	//PrintXYZ(x2, y2, 0);
	//WaitForKeypress();

	// Call timing delay
	DoDelay();

	// Map chars in the up/down/across indexes
	PokeAddr(x1, y1, char_arr[0]);				// line 900

	if( mainIndex = 1 ) then return;				// line 910
	
	colSelect := mainIndex / 2 + 1;				// line 920

	// Modifies character range selection and will take effect 
	// next time InitData() runs
	char_start := mainIndex - colSelect - 1;		// line 920

	// Select pattern style
	if( pattern_type = 1 ) then plotIndexMax := colSelect 
	else plotIndexMax := mainIndex;

	// Map chars surrounding the up/down/across indexes
	for plotIndex := 1 to plotIndexMax do			// line 930
	begin
		if( x1 = centerX ) then					// line 940
		begin
			x2 := x1 + plotIndex;
			y2 := y1;
			// Fills right of vertical
			PokeAddr(x2, y2, char_arr[plotIndex]);
			x2 := x1 - plotIndex;
			// Fills left of vertical
			PokeAddr(x2, y2, char_arr[plotIndex]);
		end 
		else if( y1 = centerY ) then			// line 950
		begin
			x2 := x1;
			y2 := y1 + plotIndex;
			// Fills below horizontal
			PokeAddr(x2, y2, char_arr[plotIndex]);
			y2 := y1 - plotIndex;
			// Fills above horizontal
			PokeAddr(x2, y2, char_arr[plotIndex]);
		end
		else begin
			y2 := y1;						// line 970
			if( x1 < centerX ) then			// line 970
			begin
				// Fills left side diagonal
				x2 := x1 + plotIndex;
				PokeAddr(x2, y2, char_arr[plotIndex]);
			end else begin
				// Fills right side diagonal
				x2 := x1 - plotIndex;		// line 980
				PokeAddr(x2, y2, char_arr[plotIndex]);
			end;
			
			x2 := x1;						// line 990
			
			if( y1 < centerY ) then			// line 990
			begin
				// Fills top corners
				y2 := y1 + plotIndex;
				PokeAddr(x2, y2, char_arr[plotIndex]);					
			end
			else begin
				// Fills bottom corners
				y2 := y1 - plotIndex;		// line 1000
				PokeAddr(x2, y2, char_arr[plotIndex]);
			end;
		end;
	end; // for
end;

// Update the display
procedure MainLoop();
begin
	for mainIndex := start_pos to stop_pos step dir do	// line 200
	begin		
		// Update color
		curr_color := cArrPtr[colorIdx];
		colorIdx := colorIdx + 1;
		if( colorIdx >= cArrLen ) then colorIdx := 0;
		
		// Map the data
		// Right
		x1 := centerX + mainIndex;			// line 210
		y1 := centerY;						// line 210
		Plot();								// line 210
		// Left
		x1 := centerX - mainIndex;			// line 220
		Plot();								// line 220
		// Down
		x1 := centerX;						// line 230
		y1 := centerY + mainIndex;			// line 230
		Plot();								// line 230
		// Up
		y1 := centerY - mainIndex;			// line 240
		Plot();								// line 240

		// Lower right
		x1 := centerX + mainIndex;			// line 250
		y1 := centerY + mainIndex;			// line 250
		Plot();								// line 250
		// Upper left
		x1 := centerX - mainIndex;			// line 260
		y1 := centerY - mainIndex;			// line 260
		Plot();								// line 260
		// Lower left
		y1 := centerY + mainIndex;			// line 270
		Plot();								// line 270
		// Upper right
		x1 := centerX + mainIndex; 			// line 280
		y1 := centerY - mainIndex;			// line 280
		Plot();								// line 280
		
		// Check user input	
		CheckInputs();
	end;
end;

// Various Pattern Mutations
procedure DoMutations();
begin
	cycleCtr := cycleCtr + 1;
	rando := Random();

	// Reverse direction (1/2 cycle)
	dir			:= -dir;
	temp			:= start_pos;
	start_pos	:= stop_pos;
	stop_pos		:= temp;

	// Mutations every full cycle
	if( dir = 1 ) then
	begin
		// Toggle pattern type
		if( pattern_type = 1 ) then 
		begin						// 4-point pattern
			pattern_type := 0;
			num_chars := myscreenheight / 2;
		end
		else begin 					// 8-point pattern
			pattern_type := 1;
			num_chars := myscreenheight / 4;
		end;

		// Randomly change center point
		if( rando < 64 ) then
		begin
			temp := myscreenwidth / 5;
			centerX := Random() & temp + (myscreenwidth - temp) / 2;
			centerY := Random() & 5 + 6;
			clearscreen($20, SCREEN_CHAR_LOC);
		end;
	end;

	// One in 16 chance of mutation
	if( rando < 16 ) then
	begin
		// Select new char range
		if( rando < 4 ) then
		begin
			char_start_st	:= 76;			// Balls and lines pattern
			char_offset_st	:= 5;
			InitData();
		end
		else if( rando < 8 ) then
		begin
			char_start_st	:= 95;			// Triangles
			char_offset_st	:= 11;	
			InitData();
		end
		else if( rando < 12 ) then
		begin
			char_start_st	:= 116;			// Angles
			char_offset_st	:= 11;	
			InitData();
		end
		else
		begin
			char_start_st	:= 64;			// Graphics Chars
			char_offset_st	:= 63;
			InitData();
		end;
		
		// Toggle reverse chars
		if( rev_enable = 1 ) then rev_enable := 0 
		else rev_enable := 1;

		// Adjust pattern size		
		dir := 1;	// Set pattern moving outward
		start_pos := 1;
		stop_pos := Random() & 6 + 6;
	end;
	
	// Update color palette	
	if( cycleCtr >= 4 ) then
	begin
		rando := Random();
		
		if( rando < 51 ) then begin
			cArrPtr := #cArr1;
			cArrLen := length(cArr1);
		end
		else if( rando < 102 ) then begin
			cArrPtr := #cArr2;
			cArrLen := length(cArr2);	
		end
		else if (rando < 153 ) then begin
			cArrPtr := #cArr3;
			cArrLen := length(cArr3);
		end
		else if (rando < 204 ) then begin
			cArrPtr := #cArr4;
			cArrLen := length(cArr4);
		end
		else begin
			cArrPtr := #cArr5;
			cArrLen := length(cArr5);
		end;
		
		cycleCtr := 0;
		//clearscreen($20, SCREEN_CHAR_LOC);
	end;	
end;											// End DoMutations

begin
	// Show the title and check number of columns
	ShowTitle();	

	// Init char array	
	InitData();

	// Clear screen
	clearscreen($20, SCREEN_CHAR_LOC);
	
	while (true) do begin
		MainLoop();

		// Do Pattern Mutations
		DoMutations();

		// Get fresh array of chars
		InitData();
	end;
end.

// eof