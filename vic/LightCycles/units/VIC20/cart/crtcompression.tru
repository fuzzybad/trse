unit crtCompression;

var
	endd: integer at $02A1; //$7b;
	count: integer at $02A3; //$7e;
	src, dst : pointer of integer;

procedure Decompress(src, dst : global pointer of integer);
begin
	src := src + 7;
	// Look up count and end
	count :=src^ ;
	src := src + 4;	
	endd := src + count;
	asm("


;unpacker variables, no need to change these
delta	=	$B4


	ldy	#0


	lda $10
	sta crtCompression_count
	lda $10
	sta crtCompression_count+1



parsetoken:
	jsr	getsrc
	pha
	lsr
	lsr
	lsr
	lsr
	beq	copymatches
	jsr	buildcount
	tax
	jsr	docopy
	lda	crtCompression_src
	cmp	crtCompression_endd
	lda	crtCompression_src+1
	sbc	crtCompression_endd+1
	bcs	done

copymatches
	jsr	getsrc
	sta	delta
	jsr	getsrc
	sta	delta+1
	pla
	and	#$0f
	jsr	buildcount
	clc
	adc	#4
	tax
	bcc	c_b1
	inc	crtCompression_count+1
c_b1:
	lda	crtCompression_src+1
	pha
	lda	crtCompression_src
	pha
	sec
	lda	crtCompression_dst
	sbc	delta
	sta	crtCompression_src
	lda	crtCompression_dst+1
	sbc	delta+1
	sta	crtCompression_src+1
	jsr	docopy
	pla
	sta	crtCompression_src
	pla
	sta	crtCompression_src+1
	jmp	parsetoken

done
	pla
	rts

docopy
	jsr	getput
	dex
	bne	docopy
	dec	crtCompression_count+1
	bne	docopy
	rts

buildcount
	ldx	#1
	stx	crtCompression_count+1
	cmp	#$0f
	bne	c_q1
c_m1	
	sta	crtCompression_count
	jsr	getsrc
	tax
	clc
	adc	crtCompression_count
	bcc	c_b2
	inc	crtCompression_count+1
c_b2
	inx
	beq	c_m1
c_q1
	rts

getput
	jsr	getsrc

putdst
	sta (crtCompression_dst),y
	inc	crtCompression_dst
	bne	c_p1
	inc	crtCompression_dst+1
c_p1
	rts

getsrc
	lda (crtCompression_src),y
	inc	crtCompression_src
	bne	c_p2
	inc	crtCompression_src+1
c_p2
	");

end;


end.
