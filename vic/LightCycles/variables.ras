/* 
Tron Light Cycles - Functions 
*/
var
	// Game Constants
	const	MYSCREEN_WIDTH: byte = 22;
	const	MYSCREEN_HEIGHT: byte = 22; // actually 23
	const	SCORE_TO_WIN: byte = 5;
	const	DEF_GAME_SPEED: byte = 80;	// Speed of game - lower is faster
	const	DEF_ANIM_SPEED: byte = 6;	// Speed of animation - lower is faster
	const	DEF_SCROLL_SPEED: byte = 16; 	// Speed of scrolling - lower is faster
	
	// Interface Locations
	const	LOC_PORT_A:	address = 37151;	// Port A - Joystick L,D,U,F
	const	LOC_PORT_B:	address = 37152;	// Port B - Joystick R
	// Set LOC_DDR_B to 127 to read joystick Right, set to 255 afterwards to enable keyboard scan.
	const	LOC_DDR_B:	address = 37154; // Data direction register B 
	
	// Character Code Defs
	const 	CLR_HOME: byte = 147;
	const	HOME: byte = 19;
	const	RETURN_KEY: byte = 13;
	const	TEXT_MODE: byte = 14;
	const	GRAPHIC_MODE: byte = 142;
	const	CRSR_UP: byte = 145;
 	const	CRSR_RT: byte = 29;
	const	CRSR_DN: byte = 17;
	const	CRSR_LT: byte = 157;
	const	RVS_ON: byte = 18;
	const 	RVS_OFF: byte = 146;
	const	CHR_SPC: byte = 32;
	const	CHR_CURVED_TOP_LT_CORNER: byte = 213;
	const	CHR_CURVED_TOP_RT_CORNER: byte = 201;
	const	CHR_CURVED_BOT_LT_CORNER: byte = 202;
	const	CHR_CURVED_BOT_RT_CORNER: byte = 203;
	const	CHR_MID2_HORIZ_LN: byte = 195;
	const	CHR_MID2_VERT_LN: byte = 194;
	const	CHR_MID3_HORIZ_LN: byte = 198;
	const	CHR_MID3_VERT_LN: byte = 221;
	const	CHR_DIAMOND: byte = 218;
	const	CHR_CIRCLE: byte = 209;
	
	// Screen code defs
	//const	SCR_THIN_TOP_HORIZ_LN: byte = 99;
	//const	SCR_THIN_BOT_HORIZ_LN: byte = 100;
	//const	SCR_THIN_LT_VERT_LN: byte = 101;
	//const	SCR_THIN_RT_VERT_LN: byte = 103;
	//const	SCR_OUTER_TOP_LT_CORNER: byte = 79;
	//const	SCR_OUTER_TOP_RT_CORNER: byte = 80;
	//const	SCR_OUTER_BOT_LT_CORNER: byte = 76;
	//const	SCR_OUTER_BOT_RT_CORNER: byte = 122;
	const	SCR_MID_HORIZ_LN: byte = 64;
	const	SCR_MID_VERT_LN: byte = 93;
	const	SCR_MID_TOP_LT_CORNER: byte = 112;
	const	SCR_MID_TOP_RT_CORNER: byte = 110;
	const	SCR_MID_BOT_LT_CORNER: byte = 109;
	const	SCR_MID_BOT_RT_CORNER: byte = 125;
	const	SCR_DIAMOND: byte = 90;
	const	SCR_CIRCLE: byte = 81;
	const	SCR_SOLID_BLOCK: byte = 160;
	const	SCR_SHADED_BLOCK: byte = 102;

	// Pointers
	screen_loc:		pointer;
	screen_loc_work:	pointer;
	message_ptr:		pointer;
	song_ptr:		pointer;

	// Counters
	i: byte = 0;
	j: byte = 0;
	k: byte = 0;
	
	// Temp vars
	tmp:				integer = 0;
	tmp_irq:			byte = 0;
	message_len:		byte = 0;
	temp_byte1:		byte = 0;
	temp_byte2:		byte = 0;
	
	// Game vars
	game_mode:		byte = 0;	// 0=One Player, 1=Two Player, 2=Two V.Sark
	game_difficulty:	byte = 2;	// 1=Easy, 2=Moderate, 3=Hard
	game_mode_changed: boolean = 1;
	game_over_flag:	byte = 0;
	game_run_flag:	byte = 0;
	score_p1: 		byte = 0;
	score_p2:		byte = 0;
	scroll_speed: 	byte = 16;	// Speed of scrolling - lower is faster
	game_speed:		byte = 50;	// Speed of game - lower is faster
	anim_speed:		byte = 6;	// Speed of animation
	music_idx:		byte = 0;
	music_sust_idx:	byte = 0;
	sound_pitch:		byte = 255;
	crash_anim_arr:	array[3] of byte = (42, 87, 81);
	// dir_map_arr:	1=L, 2=R, 3=U, 4=D
	dir_map_arr:		array[5] of integer = (0, -1, 1, -MYSCREEN_WIDTH, MYSCREEN_WIDTH);
	dir_opp_arr:		array[5] of byte = (0, 2, 1, 4, 3);
	turn_counter:	byte = 0;
	player_1_input:	byte = 0;
	player_2_input:	byte = 0;
	keybd_input:		byte = 0;
	player_1_head:	byte = 0;
	player_2_head:	byte = 0;
	player_1_fire:	boolean = 0;
	player_2_fire:	boolean = 0;
	player_1_crash:	boolean = 0;
	player_2_crash:	boolean = 0;
	player_1_xy:		integer = 0;
	player_2_xy:		integer = 0;
	player_1_trail:	array[2] of integer;
	player_2_trail:	array[2] of integer;
	scroll_num_char:	byte = 0;
	scroll_x:		byte = 0;
	scroll_y:		byte = 0;
	scroll_num_trail:byte = 0;
	scroll_inp_brk:	boolean = 0;
	scroll_step:		byte = 0;
	scroll_input:	boolean = 0;
	sark_near_player_x_dist: byte = 0;
	sark_near_player_x_neg:	boolean = 0;
	sark_near_player_y_dist:	byte = 0;
	sark_near_player_y_neg:	boolean = 0;

	// Message Strings
	//title_msg_0:		string = (CRSR_DN,CRSR_DN,RVS_ON,"GREETINGS",RVS_OFF," ",RVS_ON
	//						,"PROGRAMS!!");
	title_msg_1:		string = (CHR_CURVED_TOP_LT_CORNER,CHR_MID2_HORIZ_LN
							,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN
							,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN
							,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN
							,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN
							,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN
							,CHR_CURVED_TOP_RT_CORNER);
	title_msg_2:		string = (CHR_MID2_VERT_LN,"LIGHT CYCLE DUEL",CHR_MID3_VERT_LN);
	title_msg_3:		string = (CHR_CURVED_BOT_LT_CORNER,CHR_MID3_HORIZ_LN
							,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN,
							,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN
							,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN
							,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN
							,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN
							,CHR_CURVED_BOT_RT_CORNER);
	title_msg_4:		string = ("2023 FUZZYBAD");
	title_msg_5:		string = ("SCORE FIVE TO WIN");
	title_msg_6:		string = ("PRESS F1");
	title_msg_7:		string = ("FOR INSTRUCTIONS");
	//inst_msg_5:		string = (CRSR_DN,"PLAYER 1       PLAYER 2");
	//inst_msg_6:		string = (CHR_DIAMOND,CHR_DIAMOND,"             ",CHR_CIRCLE,CHR_CIRCLE);
	//inst_msg_7:		string = (CRSR_DN,"USE DUAL JOYSTICK ADAPTER");
	//inst_msg_8:		string = ("OR             OR");
	//inst_msg_9:		string = ("WASD+SPC       IJKL+RSH");

	score_msg_0:		string = ("P1:");
	score_msg_1:		string = (":P2 ");
	score_msg_2:		string = ("PLAYER:");
	score_msg_3:		string = (":SARK  ");
	
	msg_both_crash:	string = ("BOTH CRASHED");
	msg_p1_crash:	string = ("PLAYER 1 CRASHED");
	msg_p2_crash:	string = ("PLAYER 2 CRASHED");
	msg_plr_crash:	string = ("PLAYER CRASHED");
	msg_sark_crash:	string = ("SARK CRASHED");
	msg_p1_wins:		string = ("PLAYER 1 WINS");
	msg_p2_wins:		string = ("PLAYER 2 WINS");
	msg_plr_wins:	string = ("PLAYER WINS");
	msg_sark_wins:	string = ("SARK WINS");
	msg_get_ready:	string = ("PRESS FIRE");
	msg_blank:		string = ("                    ");
	
	msg_one_player:	string = (">>> ",RVS_ON,"ONE PLAYER",RVS_OFF," >>>");
	msg_two_player:	string = ("<<< ",RVS_ON,"TWO PLAYER",RVS_OFF," <<<");
	//msg_tvs_player:	string = ("<<< ",RVS_ON,"TWO V.SARK",RVS_OFF," <<<");
	msg_diff_select:	string = ("LEVEL:");	// 6 chars
	msg_diff_one:	string = (RVS_ON,"1",RVS_OFF," 2 3 EASY");
	msg_diff_two:	string = ("1 ",RVS_ON,"2",RVS_OFF," 3 MED "); // 13 chars
	msg_diff_three:	string = ("1 2 ",RVS_ON,"3",RVS_OFF," HARD");


	////////////////////////////////////////////////////////////////////////
	/// SOUND SECTION
	////////////////////////////////////////////////////////////////////////

	// Sound Locations
	const	LOC_SOUND_VOL:	address = 36878;		// 0-15
	const	LOC_SOUND_ALTO:	address = 36874;		// 128-255
	const	LOC_SOUND_TENO:	address = 36875;		// 128-255
	const	LOC_SOUND_SOPR:	address = 36876;		// 128-255
	const	LOC_SOUND_NOIS:	address = 36877;		// 128-255

	// Music notes
	const CONST_NOTE_1_C:	byte = 255;
	const CONST_NOTE_1_CS:	byte = 134;
	const CONST_NOTE_1_D:	byte = 141;
	const CONST_NOTE_1_DS:	byte = 147;
	const CONST_NOTE_1_E:	byte = 153;
	const CONST_NOTE_1_F:	byte = 159;
	const CONST_NOTE_1_FS:	byte = 164;
	const CONST_NOTE_1_G:	byte = 170;
	const CONST_NOTE_1_GS:	byte = 174;
	const CONST_NOTE_1_A:	byte = 179;
	const CONST_NOTE_1_AS:	byte = 183;
	const CONST_NOTE_1_B:	byte = 187;

	const CONST_NOTE_2_C:	byte = 191;
	const CONST_NOTE_2_CS:	byte = 195;
	const CONST_NOTE_2_D:	byte = 198;
	const CONST_NOTE_2_DS:	byte = 201;
	const CONST_NOTE_2_E:	byte = 204;
	const CONST_NOTE_2_F:	byte = 207;
	const CONST_NOTE_2_FS:	byte = 210;
	const CONST_NOTE_2_G:	byte = 212;
	const CONST_NOTE_2_GS:	byte = 215;
	const CONST_NOTE_2_A:	byte = 217;
	const CONST_NOTE_2_AS:	byte = 219;
	const CONST_NOTE_2_B:	byte = 221;
	
	const CONST_NOTE_3_C:	byte = 223;
	const CONST_NOTE_3_CS:	byte = 225;
	const CONST_NOTE_3_D:	byte = 226;
	const CONST_NOTE_3_DS:	byte = 228;
	const CONST_NOTE_3_E:	byte = 230;
	const CONST_NOTE_3_F:	byte = 231;
	const CONST_NOTE_3_FS:	byte = 232;
	const CONST_NOTE_3_G:	byte = 234;
	const CONST_NOTE_3_GS:	byte = 235;
	const CONST_NOTE_3_A:	byte = 236;
	const CONST_NOTE_3_AS:	byte = 237;
	const CONST_NOTE_3_B:	byte = 238;
	
	// Intro to "Anthem for Keyboard Solo" Tron theme - 7/4 time
	// Transcribed from sheet music: https://www.sheetmusicplus.com/title/tron-theme-digital-sheet-music/22158340
	// How to read sheet music: https://theonlinemetronome.com/blogs/8/treble-clef
	//  Structure - tenor pitch, alto pitch, soprano pitch, sustain 
	theme_music_arr: array[] of byte = (
		// CONST_NOTE_C,1,1,  CONST_NOTE_D,1,1,  CONST_NOTE_E,1,3, CONST_NOTE_C,1,1,  CONST_NOTE_D,1,1,  CONST_NOTE_E,1,2,  CONST_NOTE_C,1,2,
		// CONST_NOTE_G,1,4,  CONST_NOTE_D,1,4,  CONST_NOTE_B,1,4,  CONST_NOTE_G,0,3,
		// CONST_NOTE_A,0,1,  CONST_NOTE_B,1,1,  CONST_NOTE_C,1,3,  CONST_NOTE_A,0,1,  CONST_NOTE_B,1,1,  CONST_NOTE_C,1,2,  CONST_NOTE_A,0,2,
		// CONST_NOTE_E,1,4,  CONST_NOTE_B,1,4,  CONST_NOTE_GS,0,4,  CONST_NOTE_E,0,3,
		// CONST_NOTE_A,0,1,  CONST_NOTE_G,0,1,  CONST_NOTE_F,0,2,  CONST_NOTE_A,0,2,  CONST_NOTE_B,1,6,
		// CONST_NOTE_C,1,1,  CONST_NOTE_B,1,1,  CONST_NOTE_A,0,2,  CONST_NOTE_C,1,2,  CONST_NOTE_D,1,6,
		// CONST_NOTE_DS,1,1,  CONST_NOTE_CS,1,1,  CONST_NOTE_B,1,2,  CONST_NOTE_DS,1,2,  CONST_NOTE_FS,1,4,  CONST_NOTE_CS,1,3,
		// CONST_NOTE_FS,1,1,  CONST_NOTE_E,1,1,  CONST_NOTE_D,1,2,  CONST_NOTE_FS,1,2,  CONST_NOTE_A,1,6,

		0,0,0,7, 	// half measure rst
		// note 1
		0,0,0,2,  CONST_NOTE_3_C,0,0,1,  CONST_NOTE_3_D,0,0,1,  CONST_NOTE_3_E,0,0,3,  0,0,0,1,  CONST_NOTE_3_C,0,0,1,  CONST_NOTE_3_D,0,0,1,  CONST_NOTE_3_E,0,0,2,  CONST_NOTE_3_C,0,0,2,
		// note 8
		CONST_NOTE_3_G,0,0,4,  CONST_NOTE_3_D,0,0,4,  CONST_NOTE_2_B,0,0,4,  CONST_NOTE_2_G,0,0,3,
		// note 12
		0,0,0,2,  CONST_NOTE_2_A,0,0,1,  CONST_NOTE_2_B,0,0,1,  CONST_NOTE_3_C,0,0,3,  0,0,0,1,  CONST_NOTE_2_A,0,0,1,  CONST_NOTE_2_B,0,0,1,  CONST_NOTE_3_C,0,0,2,  CONST_NOTE_2_A,0,0,2,
		// note 19
		CONST_NOTE_3_E,0,0,4,  CONST_NOTE_2_B,0,0,4,  CONST_NOTE_2_GS,0,0,4,  CONST_NOTE_2_E,0,0,3,
		// note 23
		0,0,0,2,  CONST_NOTE_2_A,0,0,1,  CONST_NOTE_2_G,0,0,1,  CONST_NOTE_2_F,0,0,2,  CONST_NOTE_2_A,0,0,2,  CONST_NOTE_2_B,0,0,6,
		// note 28
		0,0,0,2,  CONST_NOTE_3_C,0,0,1,  CONST_NOTE_2_B,0,0,1,  CONST_NOTE_2_A,0,0,2,  CONST_NOTE_3_C,0,0,2,  CONST_NOTE_3_D,0,0,6,
		// note 32
		0,0,0,2,  CONST_NOTE_3_DS,0,0,1,  CONST_NOTE_3_CS,0,0,1,  CONST_NOTE_2_B,0,0,2,  CONST_NOTE_3_DS,0,0,2,  CONST_NOTE_3_FS,0,0,4,  CONST_NOTE_3_CS,0,0,3,
		// note 38
		0,0,0,2,  CONST_NOTE_3_FS,0,0,1,  CONST_NOTE_3_E,0,0,1,  CONST_NOTE_3_D,0,0,2,  CONST_NOTE_3_FS,0,0,2,  CONST_NOTE_3_A,0,0,6,
		// note 43
		0,0,0,7,	// half measure rst
		0,0,0,0	// End
	);

	// Tron Scherzo hook - DAA, dah, da-DA, daa. DA-da-DA-DAAA!
	//
	// Need sheet music - notes suggested here:
	//  https://www.reddit.com/r/piano/comments/14zix4y/tron_scherzo_wendy_carlos/
	//
	// Redditor "AccordionPianist" -
	//	"I think the riff you are referring to is that repeating "build up" to the
	//	first ascending pattern? Right hand plays B F C repeatedly (fingers 5,3,1) 
	//	while left plays A,B,A,B…. Then it jumps to first "ascension" which left 
	//	hand bass is G then G# then A while right plays D G C , C# G#, B A B E, 
	//	respectively, then bass does a G# before the next "ascension". Similar pattern 
	//	just playing up from A (instead of G) same kind of thing."
	//
	// Array structure - pitch, octave, sustain value 
	game_end_music_arr: array[] of byte = (
		// CONST_NOTE_D,0,2,  CONST_NOTE_G,0,2,
		// CONST_NOTE_C,0,1,  CONST_NOTE_CS,0,2,  CONST_NOTE_GS,0,2,  0,0,1,
		// CONST_NOTE_B,1,1,  CONST_NOTE_A,0,1,  CONST_NOTE_B,1,1,  CONST_NOTE_E,1,4,

		0,0,0,7,	// half measure rst
		CONST_NOTE_3_D,0,0,2,  CONST_NOTE_3_G,0,0,2,
		CONST_NOTE_3_C,0,0,1,  CONST_NOTE_3_CS,0,0,2,  CONST_NOTE_3_GS,0,0,2,  0,0,0,1,
		CONST_NOTE_2_B,1,0,1,  CONST_NOTE_2_A,0,0,1,  CONST_NOTE_2_B,1,0,1,  CONST_NOTE_3_E,1,0,4,
		0,0,0,14,	// full measure rst
		0,0,0,0	// End
	);

/*
	// Scale for testing
	music_scale_arr: array[20] of byte = (
		CONST_NOTE_B,0,2,
		CONST_NOTE_BS,0,2,
		CONST_NOTE_C,0,2,
		CONST_NOTE_CS,0,2,
		CONST_NOTE_D,0,2,
		CONST_NOTE_DS,0,2,
		CONST_NOTE_E,0,2,
		CONST_NOTE_ES,0,2,
		CONST_NOTE_F,0,2,
		CONST_NOTE_FS,0,2,
		CONST_NOTE_G,0,2,
		CONST_NOTE_GS,0,2,
		CONST_NOTE_A,0,2,
		CONST_NOTE_AS,0,2,
		0,0,4,	// rst
		CONST_NOTE_B,1,2,
		CONST_NOTE_BS,1,2,
		CONST_NOTE_C,1,2,
		CONST_NOTE_CS,1,2,
		CONST_NOTE_D,1,2,
		CONST_NOTE_DS,1,2,
		CONST_NOTE_E,1,2,
		CONST_NOTE_ES,1,2,
		CONST_NOTE_F,1,2,
		CONST_NOTE_FS,1,2,
		CONST_NOTE_G,1,2,
		CONST_NOTE_GS,1,2,
		CONST_NOTE_A,1,2,
		CONST_NOTE_AS,1,2,
		0,0,4,	// rst
		CONST_NOTE_B,2,2,	// these get painfully high
		CONST_NOTE_BS,2,2,
		CONST_NOTE_C,2,2,
		CONST_NOTE_CS,2,2,
		CONST_NOTE_D,2,2,
		CONST_NOTE_DS,2,2,
		CONST_NOTE_E,2,2,
		CONST_NOTE_ES,2,2,
		CONST_NOTE_F,2,2,
		CONST_NOTE_FS,2,2,
		CONST_NOTE_G,2,2,
		CONST_NOTE_GS,2,2,
		CONST_NOTE_A,2,2,
		CONST_NOTE_AS,2,2,
		0,0,4,	// rst
		0,0,0	// end
		);
*/
	
// eof
