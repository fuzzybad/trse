/**
 *	VIC Light Cycles
 *	Supports SPT Dual Joystick Interface
 *	JLP 2023 (fuzzybad@gmail.com)
 */
 
// TODO: 
//	Add third game mode: TWO VS SARK - deferred

program LightCycles;

//@define DEBUG 1
//@define PBMADDRESS $8000
//@VicMemoryConfig "8k"
@VicMemoryConfig "16k"
// Adjust start of code to make room for char data at $1400-$1C00
@startblock	$2400 "Game"
@userdata	$1400 $1C00 "Charset"

@use "gfx/gfx"
@use "input/key"	
@use "screen"
@use "text/txt"
//@use "output/pbm"	

// comment out if using multiplcation or division, otherwise save space
@ignoremethod "init16x8mul"
@ignoremethod "init16x8div"
@ignoremethod "init8x8div"
@ignoremethod "initeightbitmul"

// deprecated commands - ensure not included
@ignoremethod "initjoystick"
@ignoremethod "initmoveto"

// === includes =====================================
@include "variables.ras"
@include "support_functions.ras"
@include "functions.ras"

// === main logic ===================================
procedure game_loop();
begin
	while (game_over_flag=0) do
	begin
	  	// check input devices
	  	check_input();
		// update positions
		update_positions();
		// go vroom
	  	alternate_engine_sound();
	  	// check collisions
	  	check_collisions();
	  	// game state
	  	check_game_state();
	  	// update screen
	  	update_screen();
	
	  	if( game_over_flag = 1 ) then return;
	  	
	  	// Slow it down
	  	do_delay(game_speed);

		// for testing speed of loop
		@ifdef DEBUG	
		debug_speed();
		@endif
	end;
end;

// Init
begin
	DefineScreen();
	set_uppercase();
	screen_loc := #SCREEN_CHAR_LOC;
	color_loc := #SCREEN_COL_LOC;
		
	// Black screen, black border, inverse bit set
	LOC_SCREEN_BORD := $08;
	
	// Set aux color
	LOC_SOUND_VOL_AUX := (peek(LOC_SOUND_VOL_AUX,0) & $0F) | $F0;	

	// Copy CHARROM to RAM & set char loc to value defined by LOC_CUST_CHAR
	SetCharsetLocation(LOC_CUST_CHAR);

	// Primary loop
	while(1) do
	begin
		game_over_flag := 0;
		title_screen();
		game_screen();
		game_loop();
	end;
end.


// eof