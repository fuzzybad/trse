program C64Project;

// Adjust start of code to make room for sprite data
@startblock	$1000 "Tuner"
@userdata	$0C00 $0FFF "Sprites"

@use "input/key"	
@include "variables.ras"
@include "support_functions.ras"
@include "functions.ras"


// Testing SID registers
//
// SID Notes:
//	Voice 1 Ring/Sync work on Osc 1 & 3
//	Voice 2 Ring/Sync work on Osc 1 & 2
//	Voice 3 Ring/Sync work on Osc 2 & 3
// 	Attack/Decay registers use format: AAAADDDD where A=Attack Duration, D=Decay Duration
//	Sustain/Release register use format: VVVVRRRR where V=Sustain Volume, R=Release Duration
//	Filter Low - XXXXXFFF - X=Not Used, F=Filter high bits (11-bit number)
// 	Filter High - FFFFFFFF - F=Filter low bits (11-bit number)
//	Resonance/Filter - RRRRDCBA - R=Filter Resonance, A=Voice 1, B=Voice 2, C=Voice 3,D=External Audio
//	Mode/Volume - ABCDVVVV - A=Voice 3 Off, B=Enable High-pass Filter, C=Enable Band-pass filter, 
//							D=Enable Low-pass filter, V=Volume
//
//	Technique I found to get a pretty decent resonant sound:
//		Set Voice 3 freq between 10-35
//		Set Voice 1 Type to Triangle
//		Enable Voice 1 Sync & Ring
//	
procedure sound_debug();
begin
	init_tuner_screen();
	
	while( run_tuner = 1 ) do begin		
		update_screen_values();
		process_input();		
		update_values();
		do_delay(sd_tempo);
	end;
end;

// main loop, duh
procedure main_loop();
begin
	while( true ) do begin
		sound_mute();

		// Show title screen
		show_title_screen();
		
		// Show tuner screen
		sound_debug();
		
		// test exit function
//		inc(LOC_SCREEN_BORD);
		
		// Allow tuner screen to run again
		run_tuner := 1;
	end;

end;


// Imperative part
begin
	// Black screen, black border
	LOC_SCREEN_BORD := dark_grey;
	LOC_SCREEN_BACK := black;

	DefineScreen();
	set_uppercase();
	screen_loc := #LOC_CHAR_SCREEN;
	color_loc := #SCREEN_COL_LOC;

	// Not using low registers for now
	LOC_FRELO1	:= 0;
	LOC_FRELO2	:= 0;
	LOC_FRELO3	:= 0;
	LOC_PWLO1	:= 0;
	LOC_PWLO2	:= 0;
	LOC_PWLO3	:= 0;

	main_loop();
end.

// eof