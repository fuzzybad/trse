/**
 * C64 Sprite Physics demo
 * JLP 2023 (fuzzybad@gmail.com)
 *
 * Controls:
 * 	WASD - Balloon Direction
 *	SPC	 - Reset Balloon Position
 *	F	 - Freeze Balloon Position
 *	G	 - Toggle Gravity
 *	L	 - Toggle Lines
 *	C	 - Clear Screen
 */
 
program SpritePhysics;

@use "input/key"	
@use "gfx/gfx"

var
	const	LOC_SCREEN_BORD:	address = 53280; 	// Border color 
	const	LOC_SCREEN_BACK:	address = 53281; 	// Background color 0
	const	LOC_SPRITE_PTRS:	address = 2040;		// location of sprite data
	const	SPRITE_X_HOME: integer = 1580;		// Default X pos
	const	SPRITE_Y_HOME: integer = 640;			// Default Y pos
	const	DEF_ANIM_SPD: byte = 5;				// Default animation speed
	const	DEF_LINE_CNT: byte = 35;				// Default line count
	const	DEF_LINE_CLR: byte = 15;				// Default line colormemory
	
	loc_work:	pointer;
	
	// $3FC-$3FF are unused
	i : byte at $3FC;

	// NOTE: Position & inc vars are x10, in order to calculate fracional values
	//
	sprite_x 	: signed integer = SPRITE_X_HOME;
	sprite_y 	: signed integer = SPRITE_Y_HOME;
	dir_x		: signed integer = 0;
	dir_y		: signed integer = 0;
	max_x		: byte = 100;
	max_y		: byte = 80;
	inc_amt		: byte = 10;
	sprite_x_hi	: byte = 0;
	phyx_enable	: byte = 1;
	line_enable	: byte = 0;
	
	line_x1		: byte = 10;
	line_x2		: byte = 100;
	line_y1		: byte = 120;
	line_y2		: byte = 160;
	line_x1d		: signed byte = 3;
	line_x2d		: signed byte = 3;
	line_y1d		: signed byte = -3;
	line_y2d		: signed byte = -3;
	line_x_hi	: byte = 155;
	line_y_hi	: byte = 195;
	line_x_lo	: byte = 5;
	line_y_lo	: byte = 5;
	line_count	: byte = DEF_LINE_CNT;
	line_color	: byte = DEF_LINE_CLR;
	anim_speed	: byte = DEF_ANIM_SPD;
	
	//border_rt 	: integer = 480 + 24;	// right border
	border_rt 	: integer = 3030 + 24;	// right border
	border_lt	: integer = 240 - 24;	// left border
	border_tp	: integer = 0;// 500;
	border_bt	: integer = 2080;

	sprite_data_arr : array[63] of byte = (
		0,127,0,1,255,192,3,255,224,3,231,224,
		7,217,240,7,223,240,7,217,240,3,231,224,
		3,255,224,3,255,224,2,255,160,1,127,64,
		1,62,64,0,156,128,0,156,128,0,73,0,0,73,0,
		0,62,0,0,62,0,0,62,0,0,28,0
	);// at 832;


// Delay function
procedure do_delay( delay_val: byte );
var
	dd_i : byte;
begin
	if( delay_val > 0 ) then	begin
		for dd_i := 0 to delay_val do wait(255);
	end;
end;


procedure checkInput();
begin
	// Read Keyboard
	Key::Read();

	// Check cursor up/down
	if Key::Held(KEY_KW) then dir_y := dir_y - inc_amt;	// up
	if Key::Held(KEY_KS) then dir_y := dir_y + inc_amt;	// down	

	// Check cursor left/right
	if Key::Held(KEY_KA) then dir_x := dir_x - inc_amt;	// left
	if Key::Held(KEY_KD) then dir_x := dir_x + inc_amt;	// right

	// SPACE key reset balloon position
	if Key::Held(KEY_KSPACE) then 
	begin
		dir_x := 0;
		dir_y := 0;
		sprite_x := SPRITE_X_HOME;
		sprite_y := SPRITE_Y_HOME;
	end;

	// Freeze balloon position
	if Key::Held(KEY_KF) then 
	begin
		dir_x := 0;
		dir_y := 0;
		// cheap debounce
		do_delay(100);
	end;

	// Toggle physics
	if Key::Held(KEY_KG) then 
	begin
		if phyx_enable then begin
			phyx_enable := 0;
			LOC_SCREEN_BORD := PURPLE;
		end else begin
			phyx_enable := 1;
			LOC_SCREEN_BORD := DARK_GREY;
		end;
		
		// cheap debounce
		do_delay(100);
	end;

	// Toggle line
	if Key::Held(KEY_KL) then 
	begin
		if line_enable then line_enable := 0 else line_enable := 1;
		// cheap debounce
		do_delay(100);
	end;

	// Clear screen
	if Key::Held(KEY_KC) then 
	begin
		clearbitmap(#Gfx::bank1, 32);
		// cheap debounce
		do_delay(100);
	end;

end;

procedure drawLine();
begin
	// Clear screen once line count reached
	if (line_count = 0) then begin 
		clearbitmap(#Gfx::bank1, 32);
		line_count := DEF_LINE_CNT;

		dec(line_color);
		if (line_color = 0) then line_color := DEF_LINE_CLR; 
		ClearScreen( line_color, SCREEN_COL_LOC); // init color ram
	end;
	dec(line_count);

	// Update line endpoints
	if (line_x_hi < line_x1) then line_x1d := -line_x1d;
	if (line_x_hi < line_x2) then line_x2d := -line_x2d;
	if (line_x1 < line_x_lo) then line_x1d := -line_x1d;
	if (line_x2 < line_x_lo) then line_x2d := -line_x2d;
	if (line_y1 > line_y_hi) then line_y1d := -line_y1d;
	if (line_y2 > line_y_hi) then line_y2d := -line_y2d;
	if (line_y1 < line_y_lo) then line_y1d := -line_y1d;
	if (line_y2 < line_y_lo) then line_y2d := -line_y2d;

	line_x1 := line_x1 + line_x1d;
	line_x2 := line_x2 + line_x2d;
	line_y1 := line_y1 + line_y1d;
	line_y2 := line_y2 + line_y2d;

	// Draw line
	Gfx::Line2( line_x1, line_y1, line_x2, line_y2, 0);
end;


procedure updateState();
begin	
	// Debug
	//moveto(0,0,hi(screen_char_loc));
	//printdecimal(dir_x,3);
	
	// Background collision reverses direction 
	if (peek(^$D01F,0) & 1) then 
	begin
		// Reverse direction
		dir_y := dir_y - (dir_y * 2);	 // Workaround to set negative value	
		dir_x := dir_x - (dir_x * 2);
		
		sprite_y := sprite_y + dir_y;
		sprite_x := sprite_x + dir_x;

		// Reduce velocity on impact	
		if phyx_enable then begin
			if( dir_y < 0 ) then dir_y := dir_y + 9;
		end;
		
	end;
	
	// Update rate of change to simulate physics
	if (phyx_enable) then
	begin
		// Decay X-dir
		if (0 < abs(dir_x)) then 
		begin
			if (0 < dir_x) then begin
				dec(dir_x);
			end else begin
				inc(dir_x);
			end;
		end;

		// Decay Y-dir (always moves down)
		inc(dir_y);
	end;

	// Check max rates
	if (dir_x < 0) then begin
		if (abs(dir_x) > max_x) then dir_x := dir_x + inc_amt;
	end else begin
		if (abs(dir_x) > max_x) then dir_x := dir_x - inc_amt;
	end;
	
	if (dir_y < 0) then begin
		if (abs(dir_y) > max_y) then dir_y := dir_y + inc_amt;
	end else begin
		if (abs(dir_y) > max_y) then dir_y := dir_y - inc_amt;
	end;

	// Update position
	sprite_x := sprite_x + dir_x;

	// Only move up/down while sprite is onscreen
	if ( (border_lt < sprite_x and sprite_x_hi = 0)
      or (sprite_x < border_rt and sprite_x_hi = 1)
       ) then begin
		sprite_y := sprite_y + dir_y;	
	end;

	// Check X-boundaries.  
	// Going offscreen left-right wraps around
	if (sprite_x < border_lt) then sprite_x := border_rt;
	if (border_rt < sprite_x) then sprite_x := border_lt;

	// Check Y-boundaries.  
	// Hitting top reverses direction
	if (sprite_y < border_tp) then begin	
		sprite_y := border_tp;
		dir_y := abs(dir_y);
	end;

	// Hitting bottom reverses direction
	if (border_bt < sprite_y) then begin
		sprite_y := border_bt;
		dir_y := dir_y - (dir_y * 2); // Workaround to set negative value	
		
		// Reduce velocity on impact - higher value=less bounce
		if phyx_enable then dir_y := dir_y + 15;
	end;

end;


procedure updateScreen();
var
	sprite_x_tmp : integer;
	sprite_y_tmp : byte;
begin
	// Debug
	//moveto(0,0,hi(screen_char_loc));
	//printdecimal(sprite_y_int,3);

	// Update position of balloon	
	sprite_x_tmp := sprite_x / 10;
	sprite_y_tmp := sprite_y / 10;
	SpritePos(sprite_x_tmp, sprite_y_tmp, 0);
	
	if (line_enable) then begin
		// Update graphic lines - 160x200 (multicolor mode)
		dec(anim_speed);
		if (anim_speed = 0) then begin
			drawLine();
			anim_speed := DEF_ANIM_SPD;
		end;
	end;
end;


procedure setup();
begin
	// Clear screen, set black background & border
	ClearScreen( 32, SCREEN_CHAR_LOC); // init screen ram
	ClearScreen( line_color, SCREEN_COL_LOC); // init color ram
	LOC_SCREEN_BACK := BLACK;
	LOC_SCREEN_BORD := DARK_GREY;

	// Draw lines on screen
//	loc_work := SCREEN_CHAR_LOC + 40 * 15;
//	for i := 0 to 15 do loc_work[i] := 160; f
//	for i := 25 to 40 do	loc_work[i] := 160;
	
//	loc_work := SCREEN_CHAR_LOC + 40 * 24;
//	for i := 0 to 40 do loc_work[i] := 160; 

	// sprite data 
	poke(LOC_SPRITE_PTRS, 0, 13);
	loc_work := 832;
	for i := 0 to 63 do loc_work[i] := sprite_data_arr[i];

	// enable sprite 0
	SPRITE_BITMASK		:= %00000001;	// enable sprite 0
	
	// set sprite 0 color
	SPRITE_COLOR[0]		:= cyan;
	SPRITE_MULTICOLOR	:= %00000000;	// disable multicolor 
	
	// set sprite 0 X/Y expansion
	SPRITE_STRETCH_X		:= %00000001;	// expand sprites
	SPRITE_STRETCH_Y		:= %00000001;
end;


// Execution starts here
begin
	DefineScreen();

	Gfx::InitBitmapGraphics(0, #Gfx::bank1);
	vic_data_loc		:= $18;
	Gfx::currbank	:= $0; // Current bitmap bank (added to high bit of putpixel)
	//setmulticolormode();
	//setbitmapmode();
	
	setup();
	
	while(1) do
	begin
		waitforverticalblank();

		checkInput();
		updateState();
		updateScreen();
		
		//do_delay(10);
	end;
end.

// eof