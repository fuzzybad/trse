/**
 * This was created using the Turbo Rascal Syntax Error development platform.
 * 
 * https://turborascal.com
 * https://github.com/leuat/TRSE
 *
 * License: GPL V3
 *
 * Enhanced version of KALEIDOSCOPE from:
 *  "32 BASIC Programs for the PET Computer" Tom Rugg and Phil Feldman (1979)
 * 
 * Author: Jessica Petersen <fuzzybad@gmail.com> (Nov 2021)]
 *
 * This is a much extended version of the KALEIDO routine. The pattern will reverse,
 * randomly select different characters and move about the screen over time.
 * It also supports full-screen mode (original was 24x24 only) and supports 80-col PETs.
 * 
 */
program Kaleido;
var  
	// Main program vars
	centerX 	  		: byte = SCREEN_WIDTH / 2;
	centerY 	  		: byte = SCREEN_HEIGHT / 2;
	start_pos 	  	: byte = 1;
	stop_pos 	  	: byte = 20;
	dir			  	: byte = 1;
	char_start 	  	: byte;
	char_start_st 	: byte = 65;
	char_offset   	: byte = 63;
	num_chars	  	: byte = 6;	// Number of chars in the array
	speed 		  	: byte = 3;	// Recommended values 0-9
	rev_enable	  	: byte = 0;	// 0=Disable, 1=Enable reverse chars
	pattern_type  	: byte = 1;	// 0=4-Point Pattern, 1=8-Point Pattern
	full_screen   	: byte = 1;	// Flag for full-screen mode
	curr_color		: byte = 1;	// Current color
	char_arr 	  	: array[12] of byte;
	p 			  	: pointer;
	plotIndex, plotIndexMax, mainIndex, colSelect, i, temp : byte;
	x1, y1, x2, y2	: signed byte;

	// Used for keyboard input
	key: byte;
	
	// Text for splash screen  	
	titlemsg:	string = ("KALEIDOSCOPE+");
	authormsg1: 	string = ("JESSICA PETERSEN <FUZZYBAD>, 2021");
	authormsg2: 	string = ("BASED ON ROUTINE BY");
	authormsg3: 	string = ("RUGG AND FELDMAN, 1979");
	inst1: 		string = ("0-9 - ADJUST SPEED");
	inst2: 		string = ("Q   - QUIT");
	// PRESS ANY KEY
	promptmsg: string = (208, 210, 197, 211, 211, 32, 193, 206, 217, 32, 203, 197, 217);

//	Method to get a char from the keyboard buffer
//	TRSE procedures return accumulator value
procedure GetKey();
begin
	call(^$ffe4);	// getin
end;

// Wait for user input
procedure WaitForKeypress();
begin
	// Pause until key pressed
	temp := 0;
	while( temp = 0 ) do begin
		temp := GetKey();
	end;
end;

// Do timing delay 
// @TODO: Find better way than delay loop
procedure DoDelay();
begin
	if( speed > 0 ) then
	begin
		for i := 0 to speed do	
		begin
			wait(255);
		end;
	end;
end;

// Debug up to 3 numeric vars
procedure PrintXYZ( myX:signed byte, myY:signed byte, myZ:signed byte );
begin
	// Erase & print values
	moveto(1, 5, hi(SCREEN_CHAR_LOC));
	PrintDecimal(0, 2);
	PrintDecimal(myX, 2);

	moveto(1, 6, hi(SCREEN_CHAR_LOC));
	PrintDecimal(0, 2);
	PrintDecimal(myY, 2);

	moveto(1, 7, hi(SCREEN_CHAR_LOC));
	PrintDecimal(0, 2);
	PrintDecimal(myZ, 2);
end;
 
//	Method which shows title screen and checks screen width
procedure ShowTitle();
begin
	// Set uppercase
	poke(^59468, 0, 12);
	
	// Set background/border colors
	poke(SCREEN_BG_COL, 0, BLACK);
	poke(SCREEN_FG_COL, 0, BLACK);
	
	// Clear screen
	clearscreen($20, SCREEN_CHAR_LOC);
	
	// Set default colormemory
	clearscreen(LIGHT_GREY, SCREEN_COL_LOC);
	
	// Center the title text
	x1 := SCREEN_WIDTH / 2 - length(titlemsg) / 2;
	moveto(x1, 1, hi(SCREEN_CHAR_LOC));
   	printString(titlemsg, 0, length(titlemsg));

	// Center the author message
	x1 := SCREEN_WIDTH / 2 - length(authormsg1) / 2;
	moveto(x1, 3, hi(SCREEN_CHAR_LOC));
   	printString(authormsg1, 0, length(authormsg1));

	x1 := SCREEN_WIDTH / 2 - length(authormsg2) / 2;
	moveto(x1, 6, hi(SCREEN_CHAR_LOC));
   	printString(authormsg2, 0, length(authormsg2));

	x1 := SCREEN_WIDTH / 2 - length(authormsg3) / 2;
	moveto(x1, 8, hi(SCREEN_CHAR_LOC));
   	printString(authormsg3, 0, length(authormsg3));

	// Display Controls
	x1 := 11;
	moveto(x1, 12, hi(SCREEN_CHAR_LOC));
    printString(inst1, 0, length(inst1));

	moveto(x1, 14, hi(SCREEN_CHAR_LOC));
    printString(inst2, 0, length(inst2));

	// Center prompt to continue
	// TRSE seems bugged at counting length of numeric strings
	x1 := SCREEN_WIDTH / 2 - 13 / 2;
	moveto(x1, 20, hi(SCREEN_CHAR_LOC));
   	printString(promptmsg, 0, length(promptmsg));

	WaitForKeypress();
end;

// Fill char array
procedure InitData();
begin	
	for i := 0 to num_chars do							// line 150
	begin
		// Populate char_arr 
		char_start := char_start_st;
		
		// Option for reverse chars
		if( rev_enable = 1 ) then
		begin
			if( Random() > 127 ) then				// line 165
				char_start := char_start + 128;		// line 165
		end;
		
		char_arr[i] := Random() & char_offset + char_start;
	end;
end; 

// Check for any user inputs
procedure CheckInputs();
begin	
	key := GetKey();

	// Q - Quit
	if(key = 81) then begin
		clearscreen($20, SCREEN_CHAR_LOC);
		call(^$fd49);	// NMI	    
		//call(^$fd16);	// RESET		
	end;
	
	// 0-9 Adjust speed 
	if(key = 48) then speed := 9; // (slowest)
	if(key = 49) then speed := 8;
	if(key = 50) then speed := 7;
	if(key = 51) then speed := 6;
	if(key = 52) then speed := 5;
	if(key = 53) then speed := 4;
	if(key = 54) then speed := 3;
	if(key = 55) then speed := 2;
	if(key = 56) then speed := 1;
	if(key = 57) then speed := 0; // (fastest)
end;


// Poke value into an address
procedure PokeAddr(pokeaddr_x:byte, pokeaddr_y:byte, pokeaddr_v:byte);
begin
	if( pokeaddr_x > SCREEN_WIDTH - 1 ) then return;
	if( pokeaddr_x < 0) then return;
	if( pokeaddr_y > SCREEN_HEIGHT - 1 ) then return;
	if( pokeaddr_y < 0) then return;
	
	// Pointer value to screen RAM
	p := SCREEN_CHAR_LOC + SCREEN_WIDTH * pokeaddr_y + pokeaddr_x;
	poke(p, 0, pokeaddr_v);

	// Pointer value to color RAM
	p := SCREEN_COL_LOC + SCREEN_WIDTH * pokeaddr_y + pokeaddr_x;
	poke(p, 0, curr_color);


end;


//////////////////////////
// Plot chars on screen
//////////////////////////
procedure Plot();
begin
	// Debug
	//PrintXYZ(x2, y2, 0);
	//WaitForKeypress();

	// Call timing delay
	DoDelay();

	// Map chars in the up/down/across indexes
	PokeAddr(x1, y1, char_arr[0]);				// line 900

	if( mainIndex = 1 ) then return;				// line 910
	
	colSelect := mainIndex / 2 + 1;				// line 920

	// Modifies character range selection and will take effect 
	// next time InitData() runs
	char_start := mainIndex - colSelect - 1;		// line 920

	// Select pattern style
	if( pattern_type = 1 ) then plotIndexMax := colSelect 
	else plotIndexMax := mainIndex;

	// Map chars surrounding the up/down/across indexes
	for plotIndex := 1 to plotIndexMax do			// line 930
	begin
		if( x1 = centerX ) then					// line 940
		begin
			x2 := x1 + plotIndex;
			y2 := y1;
			// Fills right of vertical
			PokeAddr(x2, y2, char_arr[plotIndex]);
			x2 := x1 - plotIndex;
			// Fills left of vertical
			PokeAddr(x2, y2, char_arr[plotIndex]);
		end 
		else if( y1 = centerY ) then			// line 950
		begin
			x2 := x1;
			y2 := y1 + plotIndex;
			// Fills below horizontal
			PokeAddr(x2, y2, char_arr[plotIndex]);
			y2 := y1 - plotIndex;
			// Fills above horizontal
			PokeAddr(x2, y2, char_arr[plotIndex]);
		end
		else begin
			y2 := y1;						// line 970
			if( x1 < centerX ) then				// line 970
			begin
				// Fills left side diagonal
				x2 := x1 + plotIndex;
				PokeAddr(x2, y2, char_arr[plotIndex]);
			end else begin
				// Fills right side diagonal
				x2 := x1 - plotIndex;		// line 980
				PokeAddr(x2, y2, char_arr[plotIndex]);
			end;
			
			x2 := x1;						// line 990
			
			if( y1 < centerY ) then			// line 990
			begin
				// Fills top corners
				y2 := y1 + plotIndex;
				PokeAddr(x2, y2, char_arr[plotIndex]);					
			end
			else begin
				// Fills bottom corners
				y2 := y1 - plotIndex;		// line 1000
				PokeAddr(x2, y2, char_arr[plotIndex]);
			end;
		end;
	end; // for
end;

// Update the display
procedure MainLoop();
begin
	for mainIndex := start_pos to stop_pos step dir do	// line 200
	begin		
		// Update color
		curr_color := Random() & 127;
		// If black, pick another color..
		while( curr_color = 0 ) do curr_color := Random() & 127;
		
		// Map the data
		// Right
		x1 := centerX + mainIndex;			// line 210
		y1 := centerY;						// line 210
		Plot();								// line 210
		// Left
		x1 := centerX - mainIndex;			// line 220
		Plot();								// line 220
		// Down
		x1 := centerX;						// line 230
		y1 := centerY + mainIndex;			// line 230
		Plot();								// line 230
		// Up
		y1 := centerY - mainIndex;			// line 240
		Plot();								// line 240

		// Only plot these for 8-point pattern
		if( pattern_type = 1 ) then
		begin
			// Lower right
			x1 := centerX + mainIndex;			// line 250
			y1 := centerY + mainIndex;			// line 250
			Plot();								// line 250
			// Upper left
			// Check for negative/overflow flag
			x1 := centerX - mainIndex;			// line 260
			y1 := centerY - mainIndex;			// line 260
			Plot();								// line 260
			// Lower left
			y1 := centerY + mainIndex;			// line 270
			Plot();								// line 270
			// Upper right
			x1 := centerX + mainIndex; 			// line 280
			y1 := centerY - mainIndex;			// line 280
			Plot();								// line 280
		end;
	end;

	// Pattern mutations below

	// Reverse direction (1/2 cycle)
	dir			:= -dir;
	temp			:= start_pos;
	start_pos	:= stop_pos;
	stop_pos		:= temp;

	temp := Random();

	// Mutations every full cycle
	if( dir = 1 ) then
	begin
		// Toggle pattern type
		if( pattern_type = 1 ) then 
		begin						// 4-point pattern
			pattern_type := 0;
			num_chars := SCREEN_HEIGHT / 2;
		end
		else begin 					// 8-point pattern
			pattern_type := 1;
			num_chars := SCREEN_HEIGHT / 4;
		end;

		// Randomly change center point
		if( temp < 32 ) then
		begin
			//centerX := Random() & 10 + 15;
			temp := SCREEN_WIDTH / 5;
			centerX := Random() & temp + (SCREEN_WIDTH - temp) / 2;
			centerY := Random() & 5 + 10;			
			clearscreen($20, SCREEN_CHAR_LOC);
		end;
	end;

	// Select char range
	if( temp < 32 ) then
	begin
		if( temp < 8 ) then
		begin
			char_start_st := 76;
			char_offset := 5;
			InitData();
		end
		else if( temp < 16 ) then
		begin
			char_start_st := 76;
			char_offset   := 30;		
			InitData();
		end
		else if( temp < 24 ) then
		begin
			char_start_st := 116;
			char_offset   := 12;		
			InitData();
		end
		else
		begin
			char_start_st := 65;
			char_offset   := 63;
			InitData();
		end;
	end;

	// Toggle reverse chars
	if( Random() < 64 )	then
	begin
		if( rev_enable = 1 ) then rev_enable := 0 
		else rev_enable := 1;
	end;
	
	// Toggle pattern size
	if( Random() < 16 ) then
	begin
		// Set pattern moving outward
		dir := 1;
		start_pos := 1;

		// Toggle the flag
		if( full_screen = 0 ) then 
		begin
			full_screen	:= 1;
			stop_pos		:= SCREEN_WIDTH / 2;
		end
		else begin
			full_screen	:= 0;
			stop_pos		:= SCREEN_HEIGHT / 2;
		end;
		
		clearscreen($20, SCREEN_CHAR_LOC);
	end;

	// Debug
	//PrintXYZ(temp, 0, 0);
	//WaitForKeypress();
	//call(^$fd49);	// Trigger NMI	
end;

begin
	// Show the title and check number of columns
	ShowTitle();	

	// Init char array	
	InitData();

	// Clear screen
	clearscreen($20, SCREEN_CHAR_LOC);
	
	while (true) do begin
		MainLoop();

		// Check for user input	
		CheckInputs();
		
		// Get fresh array of chars
		InitData();
	end;
end.

// eof
