/**
 * This is an example file distributed as part of the Turbo Rascal Syntax Error
 * development platform.
 * 
 * https://turborascal.com
 * https://github.com/leuat/TRSE
 *
 * License: GPL V3
 *
 * Splash screen and 40/80 selection added 9/2020 by Fuzzybad 
 * 
 */
program Boxes;
var  
	// These have to be constants, as createaddresstable() 
	// doesn't work with regular vars for this param.
	const SCREEN_40: byte = 40;
	const SCREEN_80: byte = 80;
	
	saddr: array[screen_height] of integer; // Screen address table
	
	box: array[8] of byte = ($55, $43, $49, $5d, $4b, $43, $4a, $5d);
	i, x1, y1, dx, dy, temp, speed : byte = 0;

	// Used for keyboard input
	key,numkeys : byte;
	
	// Text for splash screen
	titlemsg: string  = ("TRSE 'BOXES' DEMO");
	authormsg: string = ("40/80 VERSION FUZZYBAD");
	exitmsg: string   = (211, 208, 193, 195, 197, " TO QUIT");

	// User selection for screen width 
	myscreenwidth: byte = 0;


//	Method to get a char from the keyboard buffer
//	TRSE procedures return accumulator value
procedure GetKey();
begin
	call(^$ffe4);	// getin
end;

// Wait for user input
procedure WaitForKeypress();
begin
	// Pause until key pressed
	temp := 0;
	while( temp = 0 ) do begin
		temp := GetKey();
	end;
end;

// Do timing delay 
// @TODO: Find better way than delay loop
procedure DoDelay();
begin
	if( speed > 0 ) then
	begin
		for i := 0 to speed do	
		begin
			wait(255);
		end;
	end;
end;

// Determine screen width to use
procedure SetScreenWidth();
begin
	// Determine PET model by checking first byte of EDIT ROM at $E000
	//	$A0 [160] = B1
	//	$48 [72]  = B2
	//	$36 [54]  = B4-40
	//	$4B [75]  = B4-80	
	if( peek(^$E000, 1) = 75 ) then	myscreenwidth := 80
	else myscreenwidth := 40;

	//centerX := myscreenwidth / 2 - 1;
	clearscreen($20, SCREEN_CHAR_LOC);
end;

//	Method which shows title screen and checks screen width
procedure showTitle();
begin
	// Determine screen width and clear it
	SetScreenWidth();
	
	// Set uppercase
	poke(^59468, 0, 12);
	
	// Center the title text
	x1 := myscreenwidth / 2 - length(titlemsg) / 2;
	moveto(x1, 1, hi(SCREEN_CHAR_LOC));
   	printString(titlemsg,0,length(titlemsg));

	// Center the author text
	x1 := myscreenwidth / 2 - length(authormsg) / 2;
	moveto(x1, 3, hi(SCREEN_CHAR_LOC));
   	printString(authormsg,0,length(authormsg));

	// Center exit message
	x1 := myscreenwidth / 2 - 13 / 2;
	moveto(x1, 12, hi(SCREEN_CHAR_LOC));
   	printString(exitmsg,0,13);

	// Pause until user presses key
	WaitForKeypress();
end;

	
begin
	// Show the title and check number of columns
	showTitle();
	
	// Set screen background/border color	
    clearscreen($20, screen_char_loc);
    
	// Sets up the address tables for the screen & color memory    
	if(myscreenwidth = 40) then 
		createaddresstable(#saddr,screen_char_loc,SCREEN_40,screen_height);
	
	if(myscreenwidth = 80) then 
		createaddresstable(#saddr,screen_char_loc,SCREEN_80,screen_height);

	// dx and dy are initialized to 1
	dx:=1;
	dy:=1;
	
	while (true) do begin
		// Make sure we only draw 1 box per frame
		// Add the delta dx and dy to x and y
		for i:=0 to 255 do wait(2);
		x1 := x1 + dx;
		y1 := y1 + dy;
		
		// Flip dx and dy when borders are reached
	    case x1 of
		    	//71: dx := -1;
		    	myscreenwidth - 9 : dx := -1;
		    	0 : dx := 1;
		end;
	    case y1 of
	    		20 : dy := -1;
	    		0 : dy := 1;
		end;
		
		// Draw two boxes in opposing corners
		drawtextbox(#saddr, #box, x1, y1, 9, 5);
		drawtextbox(#saddr, #box, myscreenwidth-9 - x1, 20 - y1, 9, 5);
		
		// Exit if user pressed space
		if(GetKey() = 32) then begin
		    // Clear screen
			clearscreen($20, screen_char_loc);

			//call(^$fd16);	// RESET
		    call(^$fd49);	// Trigger NMI	    
		end;
	end;
end.

// eof