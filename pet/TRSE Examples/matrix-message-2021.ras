/**
 * This is an example file distributed as part of the Turbo Rascal Syntax Error
 * development platform.
 * 
 * https://turborascal.com
 * https://github.com/leuat/TRSE
 *
 * License: GPL V3
 *
 * Splash screen and 40/80 selection added 9/2020 by Fuzzybad 
 * 
 */
program MatrixEffect;
var 
	// These have to be constants, as createaddresstable() 
	// doesn't work with regular vars for this param.
	const SCREEN_40: byte = 40;
	const SCREEN_80: byte = 80;

	i, j, temp, speed : byte; 	
	
	// Following are used to define message area 
	x1, x2, y1, y2 : byte;

   	// The ypos array will contain the current pos for each column, ranging from 0-200. These values are divided by 8
   	// before being used as a y-coordinate
   	ypos : array[80] of byte;
   	
   	// Yadd contains the addition value for each column. Is reset for each cycle
   	yadd : array[80] of byte;
   	
   	// Screen and color address tables
	saddr: array[80] of integer; // Screen address table
	//caddr: array[80] of integer; // Color adress table
  	sp:pointer;

	// Used for keyboard input
	key, numkeys : byte;
	
	// Text for splash screen  	
	titlemsg: string  = ("TRSE 'MATRIX' DEMO");
	authormsg: string = ("40/80 MESSAGE VERSION FUZZYBAD");
	exitmsg: string   = (211, 208, 193, 195, 197, " TO QUIT");

	// Text for message area
	msg_0: string  = ("WORLD OF COMMODORE 2021");
	msg_1: string  = ("                       ");
	msg_2: string  = ("   DECEMBER 4, 2021    ");
	msg_3: string  = ("                       ");
	msg_4: string  = ("TORONTO PET USERS GROUP");

	// # of chars in the width
	// @TODO: There must be some way to calculate string length..
	msg_len: byte = 23;

	// User selection for screen width 
	myscreenwidth: byte = 0;

//	Method to get a char from the keyboard buffer
//	TRSE procedures return accumulator value
procedure GetKey();
begin
	call(^$ffe4);	// getin
end;

// Wait for user input
procedure WaitForKeypress();
begin
	// Pause until key pressed
	temp := 0;
	while( temp = 0 ) do begin
		temp := GetKey();
	end;
end;

// Do timing delay 
// @TODO: Find better way than delay loop
procedure DoDelay();
begin
	if( speed > 0 ) then
	begin
		for i := 0 to speed do	
		begin
			wait(255);
		end;
	end;
end;

// Determine screen width to use
procedure SetScreenWidth();
begin
	// Determine PET model by checking first byte of EDIT ROM at $E000
	//	$A0 [160] = B1
	//	$48 [72]  = B2
	//	$36 [54]  = B4-40
	//	$4B [75]  = B4-80	
	if( peek(^$E000, 1) = 75 ) then	myscreenwidth := 80
	else myscreenwidth := 40;

	//centerX := myscreenwidth / 2 - 1;
	clearscreen($20, SCREEN_CHAR_LOC);
end;
	
//	Method which shows title screen and checks screen width
procedure showTitle();
begin
	// Determine screen width and clear it
	SetScreenWidth();
	
	// Set uppercase
	poke(^59468, 0, 12);
	
	// Center the title text
	x1 := myscreenwidth / 2 - length(titlemsg) / 2;
	moveto(x1, 1, hi(SCREEN_CHAR_LOC));
   	printString(titlemsg,0,length(titlemsg));

	// Center the author text
	x1 := myscreenwidth / 2 - length(authormsg) / 2;
	moveto(x1, 3, hi(SCREEN_CHAR_LOC));
   	printString(authormsg,0,length(authormsg));

	// Center exit message
	x1 := myscreenwidth / 2 - 13 / 2;
	moveto(x1, 12, hi(SCREEN_CHAR_LOC));
   	printString(exitmsg,0,13);

	// Pause until user presses key
	WaitForKeypress();
end;


//	Method that initializes the lookup tables used in this program
procedure InitTables();
begin
	// Yadd has random values (0-255)/80 +1
	for i:=0 to myscreenwidth do yadd[i]:=random()/myscreenwidth+1;
	
	// ypos has values 0-128
	for i:=0 to myscreenwidth do ypos[i]:=random()/2;
	
	// Sets up the address tables for the screen & color memory    
	if(myscreenwidth = 40) then 
		createaddresstable(#saddr,screen_char_loc,SCREEN_40,screen_height);
	
	if(myscreenwidth = 80) then 
		createaddresstable(#saddr,screen_char_loc,SCREEN_80,screen_height);

end;

//	Small method that fills a color at a specific x/y value on screen.
//	Only fills the value if the y is in a valid range 0..24
//	If y is less than zero (>240), then we just cycle add with 25 
procedure FillColor(xx,yy,cc:byte);
begin
	if (yy>240) then yy:=yy+screen_height;
	if (yy<screen_height) then 
	begin
		sp:=AddressTable(#saddr,xx,yy);
		sp[0]:=cc;	
	end;
end;


//	Show the message
procedure displayMessage();
begin
	x1 := (myscreenwidth - msg_len) / 2;
	x2 := x1 + msg_len;

	if(myscreenwidth = 40) then 
	begin
		y1 := 6;
		y2 := 14;
	end;
	
	if(myscreenwidth = 80) then 
	begin
		y1 := 3;
		y2 := 8;	
	end;

	// @TODO Put strings into array and print using loop
	moveto(x1,3,hi(screen_char_loc));
   	printString(msg_0,0,msg_len);
	moveto(x1,4,hi(screen_char_loc));
   	printString(msg_1,0,msg_len);
	moveto(x1,5,hi(screen_char_loc));
   	printString(msg_2,0,msg_len);
	moveto(x1,6,hi(screen_char_loc));
   	printString(msg_3,0,msg_len);
	moveto(x1,7,hi(screen_char_loc));
   	printString(msg_4,0,msg_len);
end;


//	Render the matrix effect
procedure RenderMatrix();
begin
	// Loop through the 40/80 columns
	for i:=0 to myscreenwidth do 
	begin
		// Calculate actualy y screen position
		j:=ypos[i]/8;
		
		// Print random character
		if( j<screen_height ) then 
		begin
			// This creates space for the message
			if( (i<x1 or i>=x2) or (j<y1 or j>=y2) ) then 			
			begin
				sp:=AddressTable(#saddr,i,j);
				sp[0]:=random()/4; // random character is located between 0 and 64
			end;
		end;
		
		// Fill the "tail" colors
		FillColor(i,j-8,$20);
		
		// increase ypos[i] with yadd[i]		
		ypos[i]:=ypos[i]+yadd[i];
		
		// Reset values when ypos is outside of the screen
		if (ypos[i]>=240) then
		begin 
			ypos[i]:=0;
			yadd[i]:=random()/myscreenwidth+1;
		end;
	end;	
end;	


//	Main block
begin
	// Show the title and check number of columns
	showTitle();	

	// Initialize tables	
	InitTables();

	// Display the message (not working from here for some reason)
	//displayMessage();

	// Loop effect
	while(true) do begin
		displayMessage();

		RenderMatrix();	
			
		// Exit if user pressed space
		if(GetKey() = 32) then begin
		    // Clear screen
			clearscreen($20, screen_char_loc);

			//call(^$fd16);	// RESET
		    call(^$fd49);	// Trigger NMI	    
		end;
	end;
end.
