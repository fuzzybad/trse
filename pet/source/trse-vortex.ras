/**
 * This is an example file distributed as part of the Turbo Rascal Syntax Error
 * development platform.
 * 
 * https://turborascal.com
 * https://github.com/leuat/TRSE
 *
 * License: GPL V3
 *
 * Splash screen and 40/80 selection added 9/2020 by Fuzzybad 
 * 
 */
program tutorial_07_sqrt_and_atan;
var  
	// Some variables
	x,y,tangent,i,dx,dy : byte;
	radial : integer;

	// Used for keyboard input
	key,numkeys : byte;

	// Text for splash screen  	
	titlemsg: string  = ("TRSE EXAMPLE 7  'SQRT AND ATAN'");
	authormsg: string = ("40/80 VERSION 9/2020");
	promptmsg: string = ("USE ", 244, "0 OR ", 248, "0 COLUMN SCREEN?");
	exitmsg: string   = (211, 208, 193, 195, 197, " TO QUIT");
	
	// Holds value from user selection for screen width 
	myscreenwidth: byte = 0;
	
/* 
	Method to get a char from the keyboard buffer
	TRSE procedures return accumulator value
*/
procedure getKey();
begin
	call(^$ffe4);	// getin
end;
	

/* 
	Method which shows title screen and checks screen width
*/
procedure showTitle();
begin
	// Set uppercase
	poke(^59468, 0, 12);
	
	// Clear screen
	clearscreen($20, screen_char_loc);

	// Show the title text
	moveto(5,1,hi(screen_char_loc));
   	printString(titlemsg,0,31);

	moveto(10,2,hi(screen_char_loc));
   	printString(authormsg,0,20);

	// Ask user if they have 40 or 80 column screen
	moveto(7,4,hi(screen_char_loc));
    printString(promptmsg,0,27);    

	// Show the quit instruction
	moveto(14,11,hi(screen_char_loc));
   	printString(exitmsg,0,13);

	while (myscreenwidth=0) do	begin
		// 009E			No. of Chars. in Keyboard Buffer (Queue)
		// 00E3 		Size of Keyboard Buffer
		// 0270-027A  	Keyboard Buffer Queue (FIFO)
		// Is there a value in the character buffer?
		// NOTE: Doesn't work on early ROMS
		//numkeys := peek(^$009E, 0);
		
		key := getKey();

		// 52 is '4'
		if(key = 52) then 
	    	myscreenwidth := 40;

		// 56 is '8'
		if(key = 56) then 
	    	myscreenwidth := 80;
    end;
end;


procedure RenderScreen();
begin
	// could equally well have written "screenmemory:=screen_char_loc;"
	moveto(0,0,hi(screen_char_loc));
	// Set cp to point to color memory
	// 23 rows
	for y:=0 to screen_height do begin
		//40 columns
		for x:=0 to myscreenwidth do begin
			// calculate delta x and delta y from the center of the screen (20,13)
			dx:=abs(myscreenwidth-x)/2;
			dy:=abs(13-y);
			// Calculate the "tangential" value of dx,dy. Try to plot this value indepenedntly!
			tangent:=(atan2(myscreenwidth,x,12,y));
			radial:=(dx*dx+dy*dy);
			// Calculate the "radial" value of dx,dy. Try to plot this value indepenedntly!
			// Combine the values to create a spiral. Ideally the (tangent
			i:=radial/2+tangent;
			// Ideal, (radial,tangent) should be used to lookup a seamless texture
			// Fill screen memory with the character value
			screenmemory[x]:=i;
			// Fill color data with color value based on tangent
		end;
		screenmemory:=screenmemory+myscreenwidth;
	end;
end;

procedure ShiftScreenData();
begin
	asm("
		ldx #0
loop_out:
		inc $8000,x
		inc $8100,x
		inc $8200,x
		inc $8300,x
		inc $8400,x
		inc $8500,x
		inc $8600,x
		inc $8700,x
		inx
		bne loop_out
		
	");		

end;


// Main initialization routine
begin
	// Show the title and check number of columns
	showTitle();	

	RenderScreen();

	while(true) do begin
		ShiftScreenData();
		
		// Exit if user pressed space
		if(getKey() = 32) then begin
		    // Clear screen
			clearscreen($20, screen_char_loc);

			//call(^$fd16);	// RESET
		    call(^$fd49);	// Trigger NMI	    
		end;
	end;
end.

// eof