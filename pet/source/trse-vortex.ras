/**
 * This is an example file distributed as part of the Turbo Rascal Syntax Error
 * development platform.
 * 
 * https://turborascal.com
 * https://github.com/leuat/TRSE
 *
 * License: GPL V3
 *
 * Splash screen and 40/80 selection added 9/2020 by Fuzzybad 
 * 
 */
program tutorial_07_sqrt_and_atan;
var  
	// Some variables
	x1, y1, tangent, i, dx, dy, temp, speed : byte;
	radial : integer;

	// Used for keyboard input
	key,numkeys : byte;

	// Text for splash screen  	
	titlemsg: string  = ("TRSE 'SQRT AND ATAN' DEMO");
	authormsg: string = ("40/80 VERSION FUZZYBAD");
	promptmsg: string = ("USE ", 244, "0 OR ", 248, "0 COLUMN SCREEN?");
	exitmsg: string   = (211, 208, 193, 195, 197, " TO QUIT");
	
	// Holds value from user selection for screen width 
	myscreenwidth: byte = 0;

//	Method to get a char from the keyboard buffer
//	TRSE procedures return accumulator value
procedure GetKey();
begin
	call(^$ffe4);	// getin
end;

// Wait for user input
procedure WaitForKeypress();
begin
	// Pause until key pressed
	temp := 0;
	while( temp = 0 ) do begin
		temp := GetKey();
	end;
end;

// Do timing delay 
// @TODO: Find better way than delay loop
procedure DoDelay();
begin
	if( speed > 0 ) then
	begin
		for i := 0 to speed do	
		begin
			wait(255);
		end;
	end;
end;

// Determine screen width to use
procedure SetScreenWidth();
begin
	// Determine PET model by checking first byte of EDIT ROM at $E000
	//	$A0 [160] = B1
	//	$48 [72]  = B2
	//	$36 [54]  = B4-40
	//	$4B [75]  = B4-80	
	if( peek(^$E000, 1) = 75 ) then	myscreenwidth := 80
	else myscreenwidth := 40;

	//centerX := myscreenwidth / 2 - 1;
	clearscreen($20, SCREEN_CHAR_LOC);
end;
	
//	Method which shows title screen and checks screen width
procedure showTitle();
begin
	// Determine screen width and clear it
	SetScreenWidth();
	
	// Set uppercase
	poke(^59468, 0, 12);
	
	// Center the title text
	x1 := myscreenwidth / 2 - length(titlemsg) / 2;
	moveto(x1, 1, hi(SCREEN_CHAR_LOC));
   	printString(titlemsg,0,length(titlemsg));

	// Center the author text
	x1 := myscreenwidth / 2 - length(authormsg) / 2;
	moveto(x1, 3, hi(SCREEN_CHAR_LOC));
   	printString(authormsg,0,length(authormsg));

	// Center exit message
	x1 := myscreenwidth / 2 - 13 / 2;
	moveto(x1, 12, hi(SCREEN_CHAR_LOC));
   	printString(exitmsg,0,13);

	// Pause until user presses key
	WaitForKeypress();
end;


procedure RenderScreen();
begin
	// could equally well have written "screenmemory:=screen_char_loc;"
	moveto(0,0,hi(screen_char_loc));
	// Set cp to point to color memory
	// 23 rows
	for y1:=0 to screen_height do begin
		//40 columns
		for x1:=0 to myscreenwidth do begin
			// calculate delta x and delta y from the center of the screen (20,13)
			dx:=abs(myscreenwidth-x1)/2;
			dy:=abs(13-y1);
			// Calculate the "tangential" value of dx,dy. Try to plot this value indepenedntly!
			tangent:=(atan2(myscreenwidth,x1,12,y1));
			radial:=(dx*dx+dy*dy);
			// Calculate the "radial" value of dx,dy. Try to plot this value indepenedntly!
			// Combine the values to create a spiral. Ideally the (tangent
			i:=radial/2+tangent;
			// Ideal, (radial,tangent) should be used to lookup a seamless texture
			// Fill screen memory with the character value
			screenmemory[x1]:=i;
			// Fill color data with color value based on tangent
		end;
		screenmemory:=screenmemory+myscreenwidth;
	end;
end;

procedure ShiftScreenData();
begin
	asm("
		ldx #0
loop_out:
		inc $8000,x1
		inc $8100,x1
		inc $8200,x1
		inc $8300,x1
		inc $8400,x1
		inc $8500,x1
		inc $8600,x1
		inc $8700,x1
		inx
		bne loop_out
		
	");		

end;


// Main initialization routine
begin
	// Show the title and check number of columns
	showTitle();	

	RenderScreen();

	while(true) do begin
		ShiftScreenData();
		
		// Exit if user pressed space
		if(GetKey() = 32) then begin
		    // Clear screen
			clearscreen($20, screen_char_loc);

			//call(^$fd16);	// RESET
		    call(^$fd49);	// Trigger NMI	    
		end;
	end;
end.

// eof