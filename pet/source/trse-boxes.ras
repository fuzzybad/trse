/**
 * This is an example file distributed as part of the Turbo Rascal Syntax Error
 * development platform.
 * 
 * https://turborascal.com
 * https://github.com/leuat/TRSE
 *
 * License: GPL V3
 *
 * Splash screen and 40/80 selection added 9/2020 by Fuzzybad 
 * 
 */
program Boxes;
var  
	// These have to be constants, as createaddresstable() 
	// doesn't work with regular vars for this param.
	const SCREEN_40: byte = 40;
	const SCREEN_80: byte = 80;
	
	saddr: array[screen_height] of integer; // Screen address table
	
	box: array[8] of byte = ($55, $43, $49, $5d, $4b, $43, $4a, $5d);
	i,x,y,dx,dy,t: byte = 0;

	// Used for keyboard input
	key,numkeys : byte;
	
	// Text for splash screen  	
	titlemsg: string  = ("TRSE EXAMPLE 3 'BOXES'");
	authormsg: string = ("40/80 VERSION 9/2020");
	promptmsg: string = ("USE ", 244, "0 OR ", 248, "0 COLUMN SCREEN?");
	exitmsg: string   = (211, 208, 193, 195, 197, " TO QUIT");

	// User selection for screen width 
	myscreenwidth: byte = 0;

/*

	This tutorial draws boxes on the screen using the "drawcolortextbox" method. This method
	requires pointers to screen address tables, which are set up using the createaddresstable methods.

	createaddresstable lets the user create a lookup table instead of using multiplications. example:
	to find the adress on the screen, a "address:=position + y*40;" multiplication is required. An adress
	table eliminates the need of having this multiplication, and relies solely on a lookup.  	

*/

/* 
	Method to get a char from the keyboard buffer
	TRSE procedures return accumulator value
*/
procedure getKey();
begin
	call(^$ffe4);	// getin
end;
	

/* 
	Method which shows title screen and checks screen width
*/
procedure showTitle();
begin
	// Set uppercase
	poke(^59468, 0, 12);
	
	// Clear screen
	clearscreen($20, screen_char_loc);

	// Show the title text
	moveto(9,1,hi(screen_char_loc));
   	printString(titlemsg,0,22);

	moveto(10,2,hi(screen_char_loc));
   	printString(authormsg,0,20);

	// Ask user if they have 40 or 80 column screen
	moveto(7,4,hi(screen_char_loc));
    printString(promptmsg,0,27);    

	// Show the quit instruction
	moveto(14,11,hi(screen_char_loc));
   	printString(exitmsg,0,13);

	while (myscreenwidth=0) do	begin
		// 009E			No. of Chars. in Keyboard Buffer (Queue)
		// 00E3 		Size of Keyboard Buffer
		// 0270-027A  	Keyboard Buffer Queue (FIFO)
		// Is there a value in the character buffer?
		// NOTE: Doesn't work on early ROMS
		//numkeys := peek(^$009E, 0);
		
		key := getKey();

		// 52 is '4'
		if(key = 52) then 
	    	myscreenwidth := 40;

		// 56 is '8'
		if(key = 56) then 
	    	myscreenwidth := 80;
    end;
end;

	
begin
	// Show the title and check number of columns
	showTitle();
	
	// Set screen background/border color	
    clearscreen($20, screen_char_loc);
    
	// Sets up the address tables for the screen & color memory    
	if(myscreenwidth = 40) then 
		createaddresstable(#saddr,screen_char_loc,SCREEN_40,screen_height);
	
	if(myscreenwidth = 80) then 
		createaddresstable(#saddr,screen_char_loc,SCREEN_80,screen_height);

	// dx and dy are initialized to 1
	dx:=1;
	dy:=1;
	
	while (true) do begin
		// Make sure we only draw 1 box per frame
		// Add the delta dx and dy to x and y
		for i:=0 to 255 do wait(2);
		x:=x+dx;
		y:=y+dy;
		
		// Flip dx and dy when borders are reached
	    case x of
		    	//71: dx := -1;
		    	myscreenwidth-9: dx := -1;
		    	0: dx := 1;
		end;
	    case y of
	    		20: dy := -1;
	    		0: dy := 1;
		end;
		
		// Draw two boxes in opposing corners
		drawtextbox(#saddr, #box, x, y, 9, 5);
		drawtextbox(#saddr, #box, myscreenwidth-9 - x, 20 - y, 9, 5);
		
		// Exit if user pressed space
		if(getKey() = 32) then begin
		    // Clear screen
			clearscreen($20, screen_char_loc);

			//call(^$fd16);	// RESET
		    call(^$fd49);	// Trigger NMI	    
		end;
	end;
end.

// eof