/**
 * This is an example file distributed as part of the Turbo Rascal Syntax Error
 * development platform.
 * 
 * https://turborascal.com
 * https://github.com/leuat/TRSE
 *
 * License: GPL V3
 *
 * Splash screen and 40/80 selection added 9/2020 by Fuzzybad 
 * Modified logic in InitTabs() to be more visually interesting
 * 
 */
program Sines;
var  
	i, j, k, temp, speed, x1 : byte; 
	zp, tp : pointer;
   
	vals : array[8] of byte = ($20, $2E,  $A6, $A0, $A0, $A6, $2E, $20);
	list : array[256] of byte;

	// Used for keyboard input
	key: byte;
	
	// Text for splash screen  	
	titlemsg: string  = ("TRSE 'SINES' DEMO");
	authormsg: string = ("40/80 VERSION FUZZYBAD");
	exitmsg: string   = (211, 208, 193, 195, 197, " TO QUIT");

	// User selection for screen width 
	myscreenwidth: byte = 0;


//	Method to get a char from the keyboard buffer
//	TRSE procedures return accumulator value
procedure GetKey();
begin
	call(^$ffe4);	// getin
end;

// Wait for user input
procedure WaitForKeypress();
begin
	// Pause until key pressed
	temp := 0;
	while( temp = 0 ) do begin
		temp := GetKey();
	end;
end;

// Do timing delay 
// @TODO: Find better way than delay loop
procedure DoDelay();
begin
	if( speed > 0 ) then
	begin
		for i := 0 to speed do	
		begin
			wait(255);
		end;
	end;
end;

// Determine screen width to use
procedure SetScreenWidth();
begin
	// Determine PET model by checking first byte of EDIT ROM at $E000
	//	$A0 [160] = B1
	//	$48 [72]  = B2
	//	$36 [54]  = B4-40
	//	$4B [75]  = B4-80	
	if( peek(^$E000, 1) = 75 ) then	myscreenwidth := 80
	else myscreenwidth := 40;

	//centerX := myscreenwidth / 2 - 1;
	clearscreen($20, SCREEN_CHAR_LOC);
end;
	
//	Method which shows title screen and checks screen width
procedure showTitle();
begin
	// Determine screen width and clear it
	SetScreenWidth();
	
	// Set uppercase
	poke(^59468, 0, 12);
	
	// Center the title text
	x1 := myscreenwidth / 2 - length(titlemsg) / 2;
	moveto(x1, 1, hi(SCREEN_CHAR_LOC));
   	printString(titlemsg,0,length(titlemsg));

	// Center the author text
	x1 := myscreenwidth / 2 - length(authormsg) / 2;
	moveto(x1, 3, hi(SCREEN_CHAR_LOC));
   	printString(authormsg,0,length(authormsg));

	// Center exit message
	x1 := myscreenwidth / 2 - 13 / 2;
	moveto(x1, 12, hi(SCREEN_CHAR_LOC));
   	printString(exitmsg,0,13);

	// Pause until user presses key
	WaitForKeypress();
end;

procedure InitTabs();
begin
	//for i:=0 to 255 do list[i]:=vals[(sine[i]/13)&7]; // original
	//for i:=0 to 255 do list[i]:=vals[(sine[i]/3)&11]; // clean, cool looking (11/11)
	for i:=0 to 255 do list[i]:=vals[(sine[i]/13)&9]; // looks like a wave (13/9, 9/11)
end;

procedure Render();
begin
	j:=k;
	zp:=#screen_char_loc;
	k:=k+2; // Speed control
	
	for i:=0 to screen_height do 
	begin
		j:=sine[k+i*2]/2;
		j:=j+sine[k+j*2]/4;

		//tp:=#list;		
		tp:=#list + j;
		//tp:=tp + j;
		memcpy(tp,0,zp,myscreenwidth);
		zp:=zp+myscreenwidth;
		inc(j);
	end;
end;




begin
	// Show the title and check number of columns
	showTitle();	
	
	InitTabs();
	
	while (true) do begin
		Render();
		
		// Exit if user pressed space
		if(GetKey() = 32) then begin
		    // Clear screen
			clearscreen($20, screen_char_loc);

			//call(^$fd16);	// RESET
		    call(^$fd49);	// Trigger NMI	    
		end;
	end;
end.

// eof