/* 
Tron Light Cycles - Functions 
*/
var
	// Game Constants
	const	MYSCREEN_WIDTH: byte = 40;
	const	MYSCREEN_HEIGHT: byte = 24;
	const	SCORE_TO_WIN: byte = 5;
	// Keyboard Locations
	const	LOC_KEYB: address = 151;	// Keys being pressed
	const	LOC_KEYBUF: address = 158;	// Keyboard buffer
	const	LOC_KEYSCN: address = $E810; //	59408
	const	LOC_KEYHIT: address = $E812; //  59410
	// Sound Locations
	const	LOC_SOUND_REG: address = 59467;
	const	LOC_SOUND_OCT: address = 59466;
	const	LOC_SOUND_FREQ: address = 59464;
	// Interface Locations
	const	LOC_DATA_A: address = 59408;	// Set keyboard row for scan
	const	LOC_DATA_B: address = 59410;	// Result of keyboard row scan
	const	LOC_PORT_B: address = 59471;	// User port
	// ROM Locations
	const	LOC_EDIT_ROM: address = 57344;
	
	// Character Code Defs
	const 	CLR_HOME: byte = 147;
	const	HOME: byte = 19;
	const	KEY_RETURN: byte = 13;
	const	TEXT_MODE: byte = 14;
	const	GRAPHIC_MODE: byte = 142;
	const	CRSR_UP: byte = 145;
 	const	CRSR_RT: byte = 29;
	const	CRSR_DN: byte = 17;
	const	CRSR_LT: byte = 157;
	const	RVS_ON: byte = 18;
	const 	RVS_OFF: byte = 146;
	const	CHR_SPC: byte = 32;
	const	CHR_CURVED_TOP_LT_CORNER: byte = 213;
	const	CHR_CURVED_TOP_RT_CORNER: byte = 201;
	const	CHR_CURVED_BOT_LT_CORNER: byte = 202;
	const	CHR_CURVED_BOT_RT_CORNER: byte = 203;
	const	CHR_MID2_HORIZ_LN: byte = 195;
	const	CHR_MID2_VERT_LN: byte = 194;
	const	CHR_MID3_HORIZ_LN: byte = 198;
	const	CHR_MID3_VERT_LN: byte = 221;
	const	CHR_DIAMOND: byte = 218;
	const	CHR_CIRCLE: byte = 209;
	
	// Screen code defs
	//const	SCR_THIN_TOP_HORIZ_LN: byte = 99;
	//const	SCR_THIN_BOT_HORIZ_LN: byte = 100;
	//const	SCR_THIN_LT_VERT_LN: byte = 101;
	//const	SCR_THIN_RT_VERT_LN: byte = 103;
	//const	SCR_OUTER_TOP_LT_CORNER: byte = 79;
	//const	SCR_OUTER_TOP_RT_CORNER: byte = 80;
	//const	SCR_OUTER_BOT_LT_CORNER: byte = 76;
	//const	SCR_OUTER_BOT_RT_CORNER: byte = 122;
	const	SCR_MID_HORIZ_LN: byte = 64;
	const	SCR_MID_VERT_LN: byte = 93;
	const	SCR_MID_TOP_LT_CORNER: byte = 112;
	const	SCR_MID_TOP_RT_CORNER: byte = 110;
	const	SCR_MID_BOT_LT_CORNER: byte = 109;
	const	SCR_MID_BOT_RT_CORNER: byte = 125;
	const	SCR_DIAMOND: byte = 90;
	const	SCR_CIRCLE: byte = 81;
	const	SCR_SOLID_BLOCK: byte = 160;
	const	SCR_SHADED_BLOCK: byte = 102;

	// Pointers
	screen_loc:		pointer;
	screen_loc_work:	pointer;
	message_ptr:		pointer;

	// Counters
	i: byte = 0;
	j: byte = 0;
	k: byte = 0;
	
	// Temp vars
	tmp: integer = 0;
	message_len: byte = 0;
	
	// Game vars
	game_over_flag:	byte = 0;
	score_p1: 		byte = 0;
	score_p2:		byte = 0;
	temp_byte:		byte = 0;
	num_trail: 		byte = 0;
	scroll_speed: 	byte = 16;	// Speed of scrolling - lower is faster
	game_speed:		byte = 32;	// Speed of game - lower is faster
	do_music:		boolean = 0;
	music_idx:		byte = 0;
	music_sust_idx:	byte = 0;
	sound_pitch:		byte = 255;
	sound_oct_idx:	byte = 0;
	sound_oct_arr:	array[3] of byte = (15, 51, 85);
	crash_anim_arr:	array[3] of byte = (42, 87, 81);
	dir_map_arr:		array[5] of integer = (0, -1, 1, -40, 40);
	dir_opp_arr:		array[5] of byte = (0, 2, 1, 4, 3);
	enter_pressed:	boolean = 0;
	turn_counter:	byte = 0;
	player_1_input:	byte = 0;
	player_2_input:	byte = 0;
	player_1_head:	byte = 0;
	player_2_head:	byte = 0;
	player_1_fire:	boolean = 0;
	player_2_fire:	boolean = 0;
	player_1_crash:	boolean = 0;
	player_2_crash:	boolean = 0;
	player_1_xy:		integer = 0;
	player_2_xy:		integer = 0;
	player_1_trail:	array[2] of integer;
	player_2_trail:	array[2] of integer;

	// Message Strings
	title_msg_0:		string = (CRSR_DN,CRSR_DN,CRSR_DN,RVS_ON,"GREETINGS",RVS_OFF," ",RVS_ON
							,"PROGRAMS!");
	title_msg_1:		string = (CRSR_DN,CHR_CURVED_TOP_LT_CORNER,CHR_MID2_HORIZ_LN
							,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN
							,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN
							,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN
							,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN
							,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN
							,CHR_MID2_HORIZ_LN,CHR_MID2_HORIZ_LN,CHR_CURVED_TOP_RT_CORNER);
	title_msg_2:		string = (CHR_MID2_VERT_LN," LIGHT CYCLE DUEL ",CHR_MID3_VERT_LN);
	title_msg_3:		string = (CHR_CURVED_BOT_LT_CORNER,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN
							,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN
							,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN
							,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN
							,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN
							,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN,CHR_MID3_HORIZ_LN
							,CHR_MID3_HORIZ_LN,CHR_CURVED_BOT_RT_CORNER);
	title_msg_4:		string = (CRSR_DN,RVS_ON,"FIRST",RVS_OFF," ",RVS_ON,"PLAYER",RVS_OFF," "
							,RVS_ON,"TO",RVS_OFF," ",RVS_ON,"SCORE",RVS_OFF," ",RVS_ON
							,"FIVE",RVS_OFF," ",RVS_ON,"WINS");
	title_msg_5:		string = (CRSR_DN,"PLAYER 1       PLAYER 2");
	title_msg_6:		string = (CRSR_DN,CHR_DIAMOND,CHR_DIAMOND,"             "
							,CHR_CIRCLE,CHR_CIRCLE);
	title_msg_7:		string = (CRSR_DN,"USE SPT DUAL JOYSTICKS");
	title_msg_8:		string = (CRSR_DN,"OR             OR");
	title_msg_9:		string = ("WASD+SPC       8456+RSH");
	title_msg_10:	string = (CRSR_DN,CRSR_DN,RVS_ON,"PRESS FIRE TO BEGIN");

	score_msg_0:		string = ("PLAYER 1:                    :PLAYER 2");
	
	msg_both_crash:	string = ("BOTH CRASHED, REDO");
	msg_p1_crash:	string = ("PLAYER 1 CRASHED");
	msg_p2_crash:	string = ("PLAYER 2 CRASHED");
	msg_p1_wins:		string = ("PLAYER 1 WINS");
	msg_p2_wins:		string = ("PLAYER 2 WINS");

	// Intro to "Anthem for Keyboard Solo" Tron theme - 7/4 time
	// Transcribed from sheet music: https://www.sheetmusicplus.com/title/tron-theme-digital-sheet-music/22158340
	// How to read sheet music: https://theonlinemetronome.com/blogs/8/treble-clef
	/**
	 *       Oct.0	Oct.1
	 * ---------------------
	 * B	    251	    125	 
	 * C	    238	    118	 
	 * C#	224	    110	 
	 * D	    210	    104	 
	 * D#	199	    99	 
	 * E	    188	    93	 
	 * F	    177	    88	 
	 * F#	168	    83	 
	 * G	    158	    78	 
	 * G#	149	    74	 
	 * A	    140	    69	 
	 * A#	133	    65	 
	 */
	// Array structure - pitch, octave, sustain value 
	theme_music_arr: array[100] of byte = (
		// half measure rst
		0,0,7,
		// rst, C6, D6, E6, rst, C6, D6, E6, C6
		0,0,2,  238,1,1,  210,1,1,  188,1,3,  0,0,1,  238,1,1,  210,1,1,  188,1,2,  238,1,2,
		// G6, D6, B6, G5
		158,1,4,  210,1,4,  251,1,4,  158,0,3,
		// rst, A5, B6, C6, rst, A5, B6, C6, A5
		0,0,2,  140,0,1,  251,1,1,  238,1,3,  0,0,1,  140,0,1,  251,1,1,  238,1,2,  140,0,2,
		// E6, B6, G#5, A5
		188,1,4,  251,1,4,  149,0,4,  188,0,3,
		// rst, A5, G5, F5, A5, B6, rst
		0,0,2,  140,0,1,  158,0,1,  177,0,2,  140,0,2,  251,1,6,
		// rst, C6, B6, A5, C6, D6
		0,0,2,  238,1,1,  251,1,1,  140,0,2,  238,1,2,  210,1,6,
		// rst, D#6, C#6, B6, D#6, F#6, C#6
		0,0,2,  199,1,1,  224,1,1,  251,1,2,  199,1,2,  168,1,4,  224,1,3,
		// rst, F#6, E6, D6, F#6, A6
		0,0,2,  168,1,1,  188,1,1,  210,1,2,  168,1,2,  140,1,6,
		// half measure rst
		0,0,7,		
		// Stop
		0,0,0
		);
		

// eof
